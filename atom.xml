<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ddulh&#39;s</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ddulhddul.github.io/"/>
  <updated>2021-05-08T15:03:39.809Z</updated>
  <id>https://ddulhddul.github.io/</id>
  
  <author>
    <name>ddulh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>매매일지</title>
    <link href="https://ddulhddul.github.io/2021/05/09/invest/0.%20%EB%A7%A4%EB%A7%A4%EC%9D%BC%EC%A7%80/"/>
    <id>https://ddulhddul.github.io/2021/05/09/invest/0. 매매일지/</id>
    <published>2021-05-08T15:00:00.000Z</published>
    <updated>2021-05-08T15:03:39.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="210330-매매일지"><a href="#210330-매매일지" class="headerlink" title="210330 매매일지"></a>210330 매매일지</h1><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul><li>금액 5.91usdt / 격리10X: 19:35</li><li>진입가: 59170</li><li>손절라인: 59561<ul><li>5파 상단</li></ul></li><li>이익지정가: 57641 <ul><li>5파 연장을 대비해 5파의 382지점 살짝 위</li><li>트렌드라인 하단은 넘지않는 범위</li></ul></li></ul><hr><ul><li>59644 / 0.475usdt 손절 (손절라인터치): 다음날 18:31</li></ul><h3 id="진입근거"><a href="#진입근거" class="headerlink" title="진입근거"></a>진입근거</h3><ul><li>큰 관점에서 엔딩다이아고널의 마지막 5파동으로 생각</li><li>퇴근 후 미리 그어놓은 추세선 확인 및 파동카운팅 결과</li><li>이전 매물대 60k 언저리에서 저항 있을거라고 생각 (오전부터의 관점)</li><li>5파 다 나왔다고 생각</li><li>15분봉상 RSI 하락 다이버넌스 확인 (하락으로 컨펌 확인 - 다음 캔들에서 음봉으로 나타나고 지지부진하고있었음)<ul><li>추가로 확인하니 30분 상도 하락 다이버넌스 확인 (1시간은 애매)</li></ul></li><li>애매한점<ul><li>A 리딩 다이아고날</li><li>B 조정이 D조정에 비해 너무 짧음</li><li>C 의 1파가 카운팅이 애매함 (임펄스?)</li><li>E 의 5파가 카운팅이 애매함 (임펄스가 다 안나옴?)</li></ul></li></ul><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><ul><li><p>E의 5파 카운팅이 잘못됨.</p><ul><li>운좋게 손절나가지 않음 (선물차트 기준의 3파고점은 5파보다 높아서)</li></ul></li><li><p>아침에 5분봉 상승 다이버넌스 확인했지만 종료하지않음  </p><ul><li>과매도구간 (30이하)가 아님  </li><li>다른 분봉상 다이버넌스 확인안됨  </li><li>최소한 D파의 크기나 기간만큼 되돌려야된다 생각</li></ul></li></ul><hr><ul><li>결과적으로, 5파의 카운팅이 잘못되었음.</li><li>rsi 상으로 마지막 5파의 5파에서 손절이 나갔는데, 이 때 15분봉 연속 하락다이버넌스는 확인했지만, 매매근거가 확실치 않아서 숏을 들어가진 않음. </li><li>결과적으론 5파가 엔딩 다이어고널로 나온것으로 추정됨.<ul><li>고점을 지속 갱신, rsi 는 점차 낮아지며 거래량도 감소.</li><li>최소한 전체 파동의 382 부근까지 되돌림을 줄거라 예상 아직 하락이 남았다고 보지만, 이정도 조정을 먹으려고 들어가진 않을듯. 조금더 지켜볼 듯</li></ul></li></ul><h1 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h1><h1 id="YYMMDD-매매일지"><a href="#YYMMDD-매매일지" class="headerlink" title="YYMMDD 매매일지"></a>YYMMDD 매매일지</h1><h3 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h3><ul><li>금액 usdt / 격리 X: MI:SS</li><li>진입가: 1111</li><li>손절라인: 1111</li><li>이익지정가: 1111 </li></ul><h3 id="진입근거-1"><a href="#진입근거-1" class="headerlink" title="진입근거"></a>진입근거</h3><ul><li></li><li>애매한점<ul><li></li></ul></li></ul><h3 id="결과-1"><a href="#결과-1" class="headerlink" title="결과"></a>결과</h3><ul><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;210330-매매일지&quot;&gt;&lt;a href=&quot;#210330-매매일지&quot; class=&quot;headerlink&quot; title=&quot;210330 매매일지&quot;&gt;&lt;/a&gt;210330 매매일지&lt;/h1&gt;&lt;h3 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; c
      
    
    </summary>
    
      <category term="Invest" scheme="https://ddulhddul.github.io/categories/Invest/"/>
    
    
      <category term="Invest" scheme="https://ddulhddul.github.io/tags/Invest/"/>
    
  </entry>
  
  <entry>
    <title>매매원칙</title>
    <link href="https://ddulhddul.github.io/2021/05/09/invest/0.%20%EB%A7%A4%EB%A7%A4%EC%9B%90%EC%B9%99/"/>
    <id>https://ddulhddul.github.io/2021/05/09/invest/0. 매매원칙/</id>
    <published>2021-05-08T15:00:00.000Z</published>
    <updated>2021-05-08T15:03:17.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="매매시-우선순위"><a href="#매매시-우선순위" class="headerlink" title="매매시 우선순위"></a>매매시 우선순위</h2><ol><li>엘리어트 파동이론</li><li>추세 저항 지지 패턴</li><li>볼륨</li><li>패턴</li><li>rsi 등 보조지표</li><li>피보나치</li></ol><hr><ol start="7"><li>캔들</li><li>이평선</li></ol><h2 id="매매원칙"><a href="#매매원칙" class="headerlink" title="매매원칙"></a>매매원칙</h2><ul><li>일봉상 하락/상승 다이버 확인햇어야…. 큰추세를 항상 확인해라<ul><li>(엔딩다이아고널에서 하락다이버가 명확한데도 롱을 잡고있어서 손해를 봣네 ?)</li></ul></li><li>단위를 정단위 에서 하나 밑으로 (250 X, 249 O)</li><li>무슨일이 있어도, <strong>스탑로스</strong>를 지킬것. 예측이 틀리면 스탑로스 이후 재진입 할것. (스탑로스 푸는게 틀리는 예측인 경우를 생각해라)</li><li>추격매수 하지말것 (아무리 확인햇다고 확신하더라도 !!!)</li><li>엘리엇 파동 최소 15분봉 이상 확인<ul><li>너무 작은 파동을 카운팅 신경쓰지 말자</li><li>큰 흐름을 보고 매매 하도록</li></ul></li><li>큰 흐름 확인하고 피보나치상 변곡점에서 5,15분봉 이상 상승다이버 확인후 진입 하기 (진입시점 낮은 봉으로 확인 가능)</li><li>좋은자리를 기다리고 또 기다리고 또 기다리라</li></ul><hr><p>위 원칙을 지킬 것</p><p>3분봉의 다이버전스만 보고 진입하려고햇는데<br>(5분 15분에선 나오지 않음) 손절당함.<br>    -&gt; 추후 보니 너무 빨리들어감. line 차트로 보는게 맞을듯</p><p>5분봉상 하락다이버넌스 라인차트 확인후 진입<br>-&gt; 하락 다이버 아니엇음. 너무 빨리 들어감 // 최소 1캔들 종료 이후 들어가기</p><p>3분봉 다음다음틱 확인하고 진입 하락다이번스<br>-&gt; 중간파동상 플랫형 조정이라 생각하고 b파에 .786 부분이 깨져서 진입.</p><p>5분봉에서 하락다이버 2연속 나올때 // 플랫 ABC 파동의 B 에서<br>-&gt; 손절라인 살짝 반등하고 하락 시작<br>-&gt; 중기파동상 하락이보이고, 삼각수렴 후 상방을 예측했지만 하락으로 잡고있었지만 손절됨</p><p>중기파동상 하락이라 삼각수렴을 뚫고 올라갔어도 다시 내려옴<br>내려오는 시점에 삼각수렴 기준점에서 숏 진입<br>-&gt; </p><p>long 1분봉상 임펄스 라고 판단, 4파가 3파 시작점 까지 떨어져서 절반 지점 매수,<br>상승추세에서 1파 조정 나왓다고 판단되어 추가 50프로</p><ul><li>갑자기 3파 고점을 강하게 뚫고 상승함.<br>-&gt; </li></ul><ul><li>impulse 가 나오면, 최소한 0.236 반등이 나와야함.</li><li>5분봉상 다이버넌스가 3연속 나오면 그때 단기적으로 추세 확인</li><li>저항부 + 다이버넌스 확인해서 단기 매매 가져가기</li></ul><p>4파 되돌림 고점은 3파의 382 부분이 대부분이었다.<br>382 깨면 impulse 는 지워라.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;매매시-우선순위&quot;&gt;&lt;a href=&quot;#매매시-우선순위&quot; class=&quot;headerlink&quot; title=&quot;매매시 우선순위&quot;&gt;&lt;/a&gt;매매시 우선순위&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;엘리어트 파동이론&lt;/li&gt;
&lt;li&gt;추세 저항 지지 패턴&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Invest" scheme="https://ddulhddul.github.io/categories/Invest/"/>
    
    
      <category term="Invest" scheme="https://ddulhddul.github.io/tags/Invest/"/>
    
  </entry>
  
  <entry>
    <title>엘리어트</title>
    <link href="https://ddulhddul.github.io/2021/05/09/invest/0.%20eliate/"/>
    <id>https://ddulhddul.github.io/2021/05/09/invest/0. eliate/</id>
    <published>2021-05-08T15:00:00.000Z</published>
    <updated>2021-05-08T15:04:21.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="동인파동"><a href="#동인파동" class="headerlink" title="동인파동"></a>동인파동</h1><ul><li>5파로 나눠짐</li><li>파동2는 파동1의 100보다 적게, 파동4는 파동3을 100보다 적게 되돌림.</li><li>파동3은 언제나 파동1의 종결점을 넘어서 나아감</li><li>파동3이 종종 제일 길며, 가장 짧지 않음 (1,5 보다)</li></ul><h2 id="1-충격파동"><a href="#1-충격파동" class="headerlink" title="1) 충격파동"></a>1) 충격파동</h2><ul><li>파동4는 파동1의 범위에 들어가지 않는다.</li></ul><ol><li>연장<ul><li>대부분 연장파동을 지님</li><li>1파와 3파가 비슷하면, 5파가 연잘될 확률 up</li><li>3파가 연장되면, 5파는 1파와 비슷</li></ul></li><li>절단<ul><li>다섯번째 파동이 세번째 파동을 못넘는 절단이 나올 수 있음.</li><li>절단은 다섯번째 파동이 하위 5파를 포함하는 경우 명확히 드러나고, 아주 강한 셉먼째 파동 이후에 종종 나옴</li></ul></li></ol><h2 id="2-대각삼각형-쐐기형-삼각수렴"><a href="#2-대각삼각형-쐐기형-삼각수렴" class="headerlink" title="2) 대각삼각형(쐐기형) - 삼각수렴"></a>2) 대각삼각형(쐐기형) - 삼각수렴</h2><ul><li>충격파동을 대체</li><li>하위 작용파동이 작용파동을 완전히 되돌리지 않음.</li><li>5파구조중 4파가 언제나 파동1의 범위에 들어감</li></ul><ol><li>종결쐐기형 3-3-3-3-3<ul><li>다섯번째 파동, 드물게 abc에 c에서도 나타남</li><li>이중 또는 3파의 경우 마지막 c파동으로만 나타남</li><li>더 큰 패턴의 종결부를 이루어 동력을 소진</li><li>다섯번째 파동은 종종 초과진행해서 종료 // 초과진행시 언제나 급등</li><li>상승쐐기형은 급락, 하락쐐기형은 급등으로 반전</li></ul></li><li>선도쐐기형 5-3-5-3-5<ul><li>종조 파동1과 지그재그형 abc의 a에서 나타남</li></ul></li></ol><h1 id="조정파동"><a href="#조정파동" class="headerlink" title="조정파동"></a>조정파동</h1><ul><li>절대 5파로 구성되지 않음</li></ul><ol><li>지그재그형 5-3-5 // 단일 이중 삼중<ul><li>강세장에서 단일 지그재그형은 abc단순하락으로 이어짐</li></ul></li><li>플랫형 3-3-5 // 정상 확장 유동<ul><li>a파동이 5로 전개랑 하방 압력이 부족</li><li>b는 a와 비슷, c는 a를 넘어선 지점에서 종료</li><li>지그재그보다 충격파동을 적게 되돌림</li><li>연장파동을 앞서거라 뒤따른다</li><li>기본 추세가 강할수록 짧아진다</li><li>확장에선 b가 a를 넘어 끝나고 c가 a를 넘어 끝난다.</li><li>유동에선 b는 a를 넘지만 c는 a를 못넘는다. (드문 변형)</li><li>더 큰 추세의 힘 때문에 만들어짐</li><li>유동 삼각형이 훨신 자주 나타남</li></ul></li><li>삼각형 3-3-3-3-3 // 수렴 (상승 하강 대칭), 확장(역대칭)<ul><li>파동 e는 a와 c를 잇는 경계선에 미치지 못하거나 지나칠 수 있음.</li><li>파동 b가 a와 c를 잇는 경계선에 미치지 못하거나 지나칠 수 있음</li><li>파동 b가 a의 시작점을 넘는 일은 흔하다 (유동삼각형)</li><li>때로 하위파동중 하나(c) 가 정상삼각형/확장삼각형/다중지그재그형 파동이 되기도 함.</li><li>언제나 충격파동의 4, abc의 b, 이중내지 삼중 지그재그형 파동이나 혼합형 파동의 마지막 파동 x처럼 한단계 더 큰 규모의 패턴에 속한 마지막작용파동의 앞에 형성</li><li>네번째 파동에 발생하면 다섯번째 파동이 하위 첫번째 파동만큼 빠르게 이동하는 겨웅가 있음.</li><li>강세장에서는 마지막 추진파동 대신 연장된 다섯번째 파동이 나올 수 있음.</li></ul></li><li>혼합형 // 이중3파 삼중3파<ul><li>몇가지 조정패턴이 합쳐진 횡보조합</li><li>평탄한 조정이 횡보로 연장되듯이 전개됨</li><li>삼중 3파가 혼합의 한계, 이중3파보다 드물게 나타남</li><li>하나 이상의 삼각형/지그재그형 파동이 나오지 않는다.</li><li>혼합형 패턴은 첫 패턴이 적절하게 주가를 되돌린다.</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;동인파동&quot;&gt;&lt;a href=&quot;#동인파동&quot; class=&quot;headerlink&quot; title=&quot;동인파동&quot;&gt;&lt;/a&gt;동인파동&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;5파로 나눠짐&lt;/li&gt;
&lt;li&gt;파동2는 파동1의 100보다 적게, 파동4는 파동3을 100보다 적게 
      
    
    </summary>
    
      <category term="Invest" scheme="https://ddulhddul.github.io/categories/Invest/"/>
    
    
      <category term="Invest" scheme="https://ddulhddul.github.io/tags/Invest/"/>
    
  </entry>
  
  <entry>
    <title>매억남 정리</title>
    <link href="https://ddulhddul.github.io/2021/05/09/invest/0.%20%EB%A7%A4%EC%96%B5%EB%82%A8%20%EC%A0%95%EB%A6%AC/"/>
    <id>https://ddulhddul.github.io/2021/05/09/invest/0. 매억남 정리/</id>
    <published>2021-05-08T15:00:00.000Z</published>
    <updated>2021-05-08T15:03:46.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="20210429"><a href="#20210429" class="headerlink" title="20210429"></a>20210429</h2><ul><li>15분봉부터 방향을 분석하는것</li><li>1분봉이나 5분봉으로는 타점만 잡는 것</li></ul><h2 id="20210426"><a href="#20210426" class="headerlink" title="20210426"></a>20210426</h2><ul><li>비트가 오늘 급등해서, 마이너하게 떨어질거같은데 내일이나 모레<ul><li>1 ~2 주 지켜보다가 매수를 가져가는게 좋을듯</li></ul></li><li>추세가 좋을때는, 함부로 반대 매매 하면 안된다. <strong>중요</strong><ul><li>큰시간봉을 봐라</li></ul></li><li>보는 스케일이 중요하다. 30분은 보지도 말고, <ul><li>abc 조정 나왔으면 약익절 해놓고</li></ul></li><li>두나무에서 마로 갖고있다 ?? 확인해보기</li><li>200억 번애가 넴 좋다는데 ?? 한번 찾아보자<ul><li>거래량때문에… ?</li></ul></li></ul><h2 id="20210425"><a href="#20210425" class="headerlink" title="20210425"></a>20210425</h2><ul><li>오늘 펌핑이 왔다. -&gt; 이런 생각해보기<ul><li>왜 오를까? 어떤이유일까?</li><li>비슷한 차트모양은 없읋까?</li><li>다음엔 뭐가 갈까?</li></ul></li><li>수익내면 BNB볼트를 해라<br>…ing</li></ul><h2 id="20210423"><a href="#20210423" class="headerlink" title="20210423"></a>20210423</h2><ul><li>46000즘이 단기간 바닥일 것이다.</li><li>바이낸스 유동성 스왑 (디파이)<ul><li>코인을 사서 벌어두면 높은 수익을 주는 것들이 있다.</li></ul></li><li>김프 낮을때 바이낸스로 옮겨놓기.</li><li>해외 악재 국내악재들 많이 떳다.</li><li>한번더 하락할 수 있는데, 이전저점 심하게 깨지는 않을듯.<ul><li>단기간 매수를 들어가봐도 괜찮은 자리다. (알트 포함) // rsi 상승 확인해서 (30분, 1시간봉)</li></ul></li></ul><h2 id="20210418"><a href="#20210418" class="headerlink" title="20210418"></a>20210418</h2><ul><li>엔딩다이아고날 트렌드라인 깨진 직후 (하락 직후 방송) </li><li>고점에서 호재는 호재가 아니고 저점에서 악재는 악재가 아니다<ul><li>코인베이스 나스닥 상장에도 고꾸라졌다.</li></ul></li><li>45000(매물대) ~ 41500(피보382) 까지 조정 본다.</li><li>일봉상 하락다이버 확인햇어야…. (엔딩다이아고널에서 하락다이버가 명확한데도 롱을 잡고있어서 손해를 봣네 ?)</li><li>비트코인 etf 승인 찾아보기</li><li>어떻게 빠지느냐에따라<ul><li>비코가 <strong>계단식</strong>으로 빠지면? : 알트는 많이 박살나 있을것.</li><li>비코가 <strong>삼각수렴</strong>형태로 조정이 나오면? : 알트 몇개씩 슈팅 나올것</li></ul></li><li>20일부터 그레이스케일 언락 ?? 시장에 미칠 영향 ??<ul><li>바낸 비트코인에서 가장 큰 세력</li><li>시장에 좋은 방향은 아닐 것.</li></ul></li><li>헤숄이 완성되면, 폭락이 나올것. 안나오면 삼각횡보할 가능성</li></ul><h2 id="20210413"><a href="#20210413" class="headerlink" title="20210413"></a>20210413</h2><ul><li>hashed(투자하는곳) 해쉬드 뭍은 알트 코인인데<br>  -&gt; 투자하는곳이 업비트에 많이 리스트된다.<br>  원화마켓 상장 이슈있으면<br>  나중에 엄청 펌핑온다<br>  (잘 모르지만 아이텀 같은 ??) - 아이텀 찾아보기</li></ul><h1 id="20210408"><a href="#20210408" class="headerlink" title="20210408"></a>20210408</h1><ul><li>김프의 방향은 비트코인의 방향과 일치할 것이다 (추측)</li><li>알트코인 펌핑순서 (같이가는 순서) 찾아보기 todo</li><li>과거차트 분석시 트뷰 리플레이기능 해보기</li><li>이브닝스타 캔들패턴? 주식할때 자주나오는 ?</li><li>유시민 관련주 보해양조 ?</li><li>주식은 살때인가 팔때인가로 봐야지 가격으로 예측하는게 아니다.</li><li>야놀자 나스닥 관련 밀크 알트 매매 고려</li><li>재료 살아있는 알트들 아직 꽤 있다.</li></ul><h1 id="20210407"><a href="#20210407" class="headerlink" title="20210407"></a>20210407</h1><ul><li>FOMO 랑 FUD 조심해라<ul><li>단기 1~7일 홀딩</li><li>중기 7~30일 관망 (선물로 숏)</li><li>장기 30~3달 매수</li></ul></li><li>카카오페이 상장: 디카르고(유통?) 연관성 찾아보기</li><li>대기업메타 리스트업 해보기</li><li>두나무 연관 알트 찾아보기<ul><li>나스닥상장</li><li>두나무가 투자한 코인</li><li>두나무가 연관된 코인</li></ul></li></ul><h1 id="20210401"><a href="#20210401" class="headerlink" title="20210401"></a>20210401</h1><ul><li>여름쯤의 하락장을 대비해 여러 대기업 재료좋은 코인들 조사해놓기</li><li>좋은 자리 기다리는 매매가 성공한다</li><li>날 안태우고 버스떠나는거 아쉬워하지말아라</li></ul><h2 id="20201220"><a href="#20201220" class="headerlink" title="20201220"></a>20201220</h2><ul><li>rsi가 과매수 구간에서 꺾여서 70이하로 떨어져야 rsi가 컨펌이다.</li><li>다이버넌스 매커니즘 ? 어떻게 다이버 날것을 예상하는가?<ul><li>가격이랑 보조지표랑 반대로 가는 현상 -&gt; 추세 전환을 의미</li><li>한번의 급락이 필요 -&gt; 급락이 나와야 과매도 구간이 나온다.</li><li>그 후에 급락이 또 나오면 상다 안나오겠지.</li><li>더 큰 시간프레임일수록 더 정확하고 크게 추세가 전환된다.</li><li>보통 임펄스에서 든다. 3파가 강하게 뜨고 5파가 많이 못올라가감</li><li>핵심은 한번 강하고 한번은 약하게 떠야.</li><li>그 후 급락이 나올지 안나올지는 ?<ul><li>매물대 상단부근이니까 예측하는것</li></ul></li></ul></li></ul><h2 id="20201210-주식"><a href="#20201210-주식" class="headerlink" title="20201210 주식"></a>20201210 주식</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">관심은 돈이다</span><br><span class="line">싸게사서 비싸게팔아라</span><br><span class="line">아무도 관심없는거 저평가된거</span><br><span class="line">- 재무제표</span><br><span class="line">- 시총이 높다</span><br><span class="line">- 대주주지분륙 높다. 제외하고 얼마되는지</span><br><span class="line">- 가벼울수록 작전치기 좋다</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">우선주는 의결권 행사를 못하지만 배당을 준다</span><br><span class="line">반도체 판매량은 무조건 늘어날거같다</span><br><span class="line">중국 위안화와 원화 상관관계가 .7 정도 - 높다</span><br><span class="line">무역때문이다.</span><br><span class="line">우리나라수출의 33프로는 중국으로간다.</span><br><span class="line">(25 중국 8 홍콩)</span><br><span class="line">중국 직접투자가 힘들다 홍콩을통해</span><br><span class="line">간접투자에 대한 리스크때문에</span><br><span class="line">그런 우회가 우리나라쪽으로 들어온다</span><br><span class="line">(증권중에서도 삼성전자) 시가총액이 높기때문</span><br><span class="line">원달라환율이 떨어지면 그래서 올라가는거 ?</span><br><span class="line">** 위안화 절상 / 원달라환율을 확인해야겟네</span><br><span class="line">주주환원정책이 좋아서 (배당)</span><br><span class="line">주가전환패턴 이브닝스타패턴?? </span><br><span class="line"></span><br><span class="line">kt&amp;g ?</span><br><span class="line">주식은 가치주와 성장주</span><br><span class="line">우리생활과 밀접해서 언제든 소비할수잇어서 저평가되오잇는</span><br><span class="line">성장성이 없다. 매력을 못느낌</span><br><span class="line">올해처럼 주식 터질때 상승랠리 이끈건 성장주들</span><br><span class="line">fang / bbig</span><br><span class="line">나중에 성장주가 다 이끈이후엔</span><br><span class="line">피로도가 느껴진다.</span><br><span class="line">사람들은 저평가된 가치주에 끌린다.</span><br><span class="line">12월 배당주의 계절</span><br><span class="line">3~5 거래일 봐야 외국인 수급이 붘엇다고 볼수잇다.</span><br></pre></td></tr></table></figure><h2 id="20201127"><a href="#20201127" class="headerlink" title="20201127"></a>20201127</h2><p>좋은타점을 기다려라.<br>애매한 자리 들어가지말아라<br>전체 추세대로 매매를 해라. 숏롱 다 먹으려하지말고</p><h1 id="20201126"><a href="#20201126" class="headerlink" title="20201126"></a>20201126</h1><ul><li>루멘 리플 같이감</li><li>엘리어트 기반으로 추세 지지 매매 하면된다… 1분봉이라도</li><li><a href="https://flipsidecrypto.com/" target="_blank" rel="noopener">https://flipsidecrypto.com/</a><ul><li>코인 평가</li></ul></li></ul><h1 id="20201119"><a href="#20201119" class="headerlink" title="20201119"></a>20201119</h1><ul><li>패턴은 중간 에상을 하고 들어가는게 아니라 완성되면 마지막점에서 들어가는것<br>(엔딩다이아고날, 삼각수렴 등)</li><li>내 매매원칙 세워놓고 안지키면 손구락 짜르기</li><li>4파에서 삼각수렴 나오면 5파 상승 나오고 기계적으로 숏치면 먹는다</li><li>상승하다 삼각수렴은 4파 확률이 매우 높음 확신은 x</li><li>클레이튼 스왑 찾아보기</li><li>올라가면서 볼륨이 터지는건 저항을 많이 받는다는것</li></ul><h1 id="20201111"><a href="#20201111" class="headerlink" title="20201111"></a>20201111</h1><h2 id="삼각수렴-이후-상승은-연장파동이-거의-없다"><a href="#삼각수렴-이후-상승은-연장파동이-거의-없다" class="headerlink" title="삼각수렴 이후 상승은 연장파동이 거의 없다."></a>삼각수렴 이후 상승은 연장파동이 거의 없다.</h2><h2 id="상승의-삼각수렴에서-D웨이브에서-숏타지마라"><a href="#상승의-삼각수렴에서-D웨이브에서-숏타지마라" class="headerlink" title="상승의 삼각수렴에서 D웨이브에서 숏타지마라."></a>상승의 삼각수렴에서 D웨이브에서 숏타지마라.</h2><ul><li>C 에서 롱으로 가져가고</li><li>D의 고점을 확인하는게 너무 어렵</li><li>D를 숏타도 끝까지 안가고 올라가는경우가 너무 많음.</li></ul><h2 id="알트장"><a href="#알트장" class="headerlink" title="알트장 ?"></a>알트장 ?</h2><ul><li>비트가 어느정도 올라서 횡보할때</li><li>알트가 따라 오르겠구나 하는 기대심리</li><li>첫 축포를 쏴주는 코인을 확인</li><li>두번째꺼 찾아라</li><li>캔드패턴을 보면 된다.<ol><li>일봉 위주로<ul><li>간단하게, 장대양봉 이후에 위꼬리달고 내려오고 다음날 음봉이 나왔다 ?</li><li>다음캔들에서 양봉꽉채워서 마감하면, 위로 터진다.</li><li>양봉대비 음봉 거래량이 작아야해</li></ul></li><li>박스권 매집봉 그리다가 꽉채운 양봉이 하나 나오면서 박스 뚫을때</li></ol></li></ul><h1 id="20201028"><a href="#20201028" class="headerlink" title="20201028"></a>20201028</h1><h2 id="엔딩다이아고널"><a href="#엔딩다이아고널" class="headerlink" title="엔딩다이아고널"></a>엔딩다이아고널</h2><ul><li>5파에서 고점 상승</li><li>거래량 빠짐</li><li>RSI 빠짐</li></ul><h2 id="헤드앤숄더-패턴-다시-검색해보기"><a href="#헤드앤숄더-패턴-다시-검색해보기" class="headerlink" title="헤드앤숄더 패턴 다시 검색해보기"></a>헤드앤숄더 패턴 다시 검색해보기</h2><h2 id="5파의-모양은"><a href="#5파의-모양은" class="headerlink" title="5파의 모양은"></a>5파의 모양은</h2><ul><li>rsi 는 대체로 3파 고점보다 낮아지고</li><li>매수세도 낮아짐.</li><li>자연스럽게 하락다이번스를 맞고 내려감</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;20210429&quot;&gt;&lt;a href=&quot;#20210429&quot; class=&quot;headerlink&quot; title=&quot;20210429&quot;&gt;&lt;/a&gt;20210429&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;15분봉부터 방향을 분석하는것&lt;/li&gt;
&lt;li&gt;1분봉이나 5분봉으로는 타
      
    
    </summary>
    
      <category term="Invest" scheme="https://ddulhddul.github.io/categories/Invest/"/>
    
    
      <category term="Invest" scheme="https://ddulhddul.github.io/tags/Invest/"/>
    
  </entry>
  
  <entry>
    <title>부동산</title>
    <link href="https://ddulhddul.github.io/2021/05/09/invest/0.%20%EB%B6%80%EB%8F%99%EC%82%B0/"/>
    <id>https://ddulhddul.github.io/2021/05/09/invest/0. 부동산/</id>
    <published>2021-05-08T15:00:00.000Z</published>
    <updated>2021-05-08T15:03:56.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20210423-구해줘-월부"><a href="#20210423-구해줘-월부" class="headerlink" title="20210423 구해줘 월부"></a>20210423 구해줘 월부</h1><ul><li>주택담보대출은 체증식으로 하는게 좋다.<ul><li>처음에 적개 내는게 나중을 위해서도 좋음 (자본 모으기, 이사갈때 대비)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;20210423-구해줘-월부&quot;&gt;&lt;a href=&quot;#20210423-구해줘-월부&quot; class=&quot;headerlink&quot; title=&quot;20210423 구해줘 월부&quot;&gt;&lt;/a&gt;20210423 구해줘 월부&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;주택담보대출은 체증식으
      
    
    </summary>
    
      <category term="Invest" scheme="https://ddulhddul.github.io/categories/Invest/"/>
    
    
      <category term="Invest" scheme="https://ddulhddul.github.io/tags/Invest/"/>
    
  </entry>
  
  <entry>
    <title>알트</title>
    <link href="https://ddulhddul.github.io/2021/05/09/invest/0.%20%EC%95%8C%ED%8A%B8/"/>
    <id>https://ddulhddul.github.io/2021/05/09/invest/0. 알트/</id>
    <published>2021-05-08T15:00:00.000Z</published>
    <updated>2021-05-08T15:04:03.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="카카오페이-두나무-연관성"><a href="#카카오페이-두나무-연관성" class="headerlink" title="카카오페이 두나무 연관성 ?"></a>카카오페이 두나무 연관성 ?</h2><p>카카오페이 배송 서비스를 통해 이뤄지는 화주들의 주문정보를 비롯해 배송 과정에 참여하는 창고사업자, 물류사업자들이 수행하는 물류 정보 등 다양한 물류 트랜잭션을 디카르고 블록체인 네트워크에 저장하고, 이를 활용해 카카오페이 배송 서비스의 물류 퀄리티를 향상시킬 예정이다</p><p>차세대 물류 네트워크를 위한 협업기반 분산 프로토콜 </p><p>2500 만이 사용하는 카카오페이<br>8000개 이상 물류 거점가진 롯디 글로벌로지스<br>델레오 협업<br>글로벌시장 </p><p>디카르고가 최근 상승세를 보인 것은 카카오페이 배송 서비스 관련 물류데이터 협업을 발표해서다. </p><p>디카르고는 3일 업비트 공시를 통해 카카오페이 배송 운영사인 이지고와 카카오페이 배송 서비스와 관련한 물류 데이터 협업을 시작한다고 밝혔다. </p><ul><li>카카오페이 나스닥 상장 6월 예정 ?</li></ul><h1 id="210404"><a href="#210404" class="headerlink" title="210404"></a>210404</h1><ul><li>트론 저스트 디파이 등 관련 코인 ?</li><li>디센트 마나 코인관련 ?</li><li>코인 생태계 찾아보기</li><li>루멘 리플 같이감</li><li>인도 거래소 코인 WazirX(wrx)<ul><li>바이낸스가 매수햇다?</li><li>시총이 아직 상당히 작다.</li></ul></li></ul><h1 id="코인-평가"><a href="#코인-평가" class="headerlink" title="코인 평가"></a>코인 평가</h1><ul><li><a href="https://flipsidecrypto.com/" target="_blank" rel="noopener">https://flipsidecrypto.com/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;카카오페이-두나무-연관성&quot;&gt;&lt;a href=&quot;#카카오페이-두나무-연관성&quot; class=&quot;headerlink&quot; title=&quot;카카오페이 두나무 연관성 ?&quot;&gt;&lt;/a&gt;카카오페이 두나무 연관성 ?&lt;/h2&gt;&lt;p&gt;카카오페이 배송 서비스를 통해 이뤄지는 
      
    
    </summary>
    
      <category term="Invest" scheme="https://ddulhddul.github.io/categories/Invest/"/>
    
    
      <category term="Invest" scheme="https://ddulhddul.github.io/tags/Invest/"/>
    
  </entry>
  
  <entry>
    <title>주식</title>
    <link href="https://ddulhddul.github.io/2021/05/09/invest/0.%20%EC%A3%BC%EC%8B%9D/"/>
    <id>https://ddulhddul.github.io/2021/05/09/invest/0. 주식/</id>
    <published>2021-05-08T15:00:00.000Z</published>
    <updated>2021-05-08T15:04:11.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="210403"><a href="#210403" class="headerlink" title="210403"></a>210403</h1><ul><li>중국 게임 내 버버리 퇴출 ??<ul><li>추가로 들어갈수 있는 기업들 있을것</li></ul></li><li>풀무원<ul><li>얇은피만두가 2020년 뭐 상받음</li><li>만두가 매출 6프로정도지만, 이익률이 엄청남 만두가.</li><li>아직 만두로 유명하지 않지만 프레임이 그쪽으로 가게되면… ?</li></ul></li><li>sk바이오팜 (개인검색)<ul><li>차트가 rsi 일봉상 상다 먹은거같은데 ??</li><li>충분한 조정이 왔다고 보는데 재료가 있을라나 ?</li></ul></li><li>소문난 잔치에 먹을것 없다. 기다려라</li></ul><hr><h3 id="원자재물자-상승-유가-오르고-곡물오르고-하면"><a href="#원자재물자-상승-유가-오르고-곡물오르고-하면" class="headerlink" title="원자재물자 상승 유가 오르고 곡물오르고 하면"></a>원자재물자 상승 유가 오르고 곡물오르고 하면</h3><ul><li>풀무원 cj제일제당 농심 등 가공업체들 ?</li></ul><h3 id="대두가격-오르는걸-풀무원이-두고볼까"><a href="#대두가격-오르는걸-풀무원이-두고볼까" class="headerlink" title="대두가격 오르는걸 풀무원이 두고볼까 ?"></a>대두가격 오르는걸 풀무원이 두고볼까 ?</h3><ul><li>대두가격 오른걸 기회삼아 두부가격 오를것</li><li>올릴수있는 근거가 생겨서</li><li>가격은 100원 올리고 원가는 10원 오르는</li><li>이익은 더 오른다</li><li>올해 흉작이라 오르고 농부들이 다시 두부를 많이 생산하면? <ul><li>원재료 가격은 낮아지지만 가공품 가격은 내려가지 않는다.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;210403&quot;&gt;&lt;a href=&quot;#210403&quot; class=&quot;headerlink&quot; title=&quot;210403&quot;&gt;&lt;/a&gt;210403&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;중국 게임 내 버버리 퇴출 ??&lt;ul&gt;
&lt;li&gt;추가로 들어갈수 있는 기업들 있을것&lt;/l
      
    
    </summary>
    
      <category term="Invest" scheme="https://ddulhddul.github.io/categories/Invest/"/>
    
    
      <category term="Invest" scheme="https://ddulhddul.github.io/tags/Invest/"/>
    
  </entry>
  
  <entry>
    <title>COIN - ICX 아이콘</title>
    <link href="https://ddulhddul.github.io/2021/05/09/invest/COIN%20-%20ICX%20%EC%95%84%EC%9D%B4%EC%BD%98/"/>
    <id>https://ddulhddul.github.io/2021/05/09/invest/COIN - ICX 아이콘/</id>
    <published>2021-05-08T15:00:00.000Z</published>
    <updated>2021-05-08T15:04:29.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="코인-정보"><a href="#코인-정보" class="headerlink" title="코인 정보"></a>코인 정보</h2><ul><li><a href="kr.coinness.com">kr.coinness.com</a></li><li><a href="cointelegraph.com">cointelegraph.com</a></li></ul><h1 id="ICX-아이콘"><a href="#ICX-아이콘" class="headerlink" title="ICX 아이콘"></a>ICX 아이콘</h1><ul><li><a href="https://icon.foundation/?lang=ko" target="_blank" rel="noopener">https://icon.foundation/?lang=ko</a></li><li><a href="https://tracker.icon.foundation/" target="_blank" rel="noopener">https://tracker.icon.foundation/</a></li><li>최초발행    2017년 10월 27일</li><li>시가총액    1.2조원(21.03.09 기준)</li><li>총 발행한도    800,460,000</li><li>합의 프로토콜    LFT</li></ul><p>2017년에 시작된 아이콘은 다양한 블록체인 커뮤니티를 연결하는 글로벌 ‘인터체인’ 프로젝트로서, <strong>ICX 암호화폐</strong>를 사용하는 블록체인 플랫폼입니다. 아이콘은 <strong>초연결사회</strong>(Hyperconnect the World)의 비전 아래, 고성능 블록체인 엔진 ‘<strong>루프체인</strong>‘과 국내외 기업들과의 협약을 통해 비즈니스 모델 및 서비스 기획, 다양한 디앱(DApp) 프로젝트 발굴과 엑셀러레이팅을 지원합니다. 프라이빗 체인은 물론 퍼블릭 체인까지 사업을 확장하는 등 블록체인 기술이 <strong>실생활에 적용되는 환경</strong>을 구축하고 있습니다.</p><h2 id="백서"><a href="#백서" class="headerlink" title="백서"></a>백서</h2><p><a href="https://icon.foundation/resources/whitepaper/ICON_Whitepaper_KO.pdf" target="_blank" rel="noopener">https://icon.foundation/resources/whitepaper/ICON_Whitepaper_KO.pdf</a></p><p>ICON 은 블록체인으로 구성된 다양한 독립적 Community 가 연결된 탈중앙화된 네트워크이다.</p><h3 id="기존의-문제점"><a href="#기존의-문제점" class="headerlink" title="기존의 문제점"></a>기존의 문제점</h3><p>수많은 블록체인 프로젝트는 이러한 요구와 별도로 블록체인의 탈중앙적 기술에만 초점이<br>맞춰져 있으며, 그로 인해 <strong>현실세계의 적용에 있어서 많은 한계</strong>를 드러내고 있다. </p><p>가상화폐세계와 현실세계를 이원화시켜 새로운 세상을 만<br>들고자 하거나, 해당 문제점에 대해서는 해결책을 제시하지 못하고 있다.</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>카드같은 중앙화된 시스템으로 인해 오는손실들<br>(예를 들면, 거래 수수료 같은) 것들을 최소화 하는 방안으로 </p><h3 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h3><ol><li>무엇을 연결할것인가?</li><li>어떻게 연결할것인가?</li><li>어떻게 작동해야 하는가?</li></ol><ul><li><p>컨소시엄에서 추진하는 첫 번째 서비스인 블록체인 기반 공동인증서비스(“Chain ID”)는<br>BSI(Blockchain Signature Infrastructure) 기반으로 인증서를 발급하여 별도의 인증기관 없이 사용자<br>와 금융기관간 직접적인 인증 및 전자서명 생성 및 검증이 가능한 서비스로 2017년 10월 말에<br>공식 오픈되었다</p></li><li><p>국내 탑 생명보험사는 보험금 청구및 지급에 대한 시범사업 추진중</p></li><li><p>2017년 12월 초부터 실손보험<br>등 일부 상품을 대상으로 시범사업을 시작했다.</p></li></ul><p>등등</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;코인-정보&quot;&gt;&lt;a href=&quot;#코인-정보&quot; class=&quot;headerlink&quot; title=&quot;코인 정보&quot;&gt;&lt;/a&gt;코인 정보&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;kr.coinness.com&quot;&gt;kr.coinness.com&lt;/a&gt;&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="Invest" scheme="https://ddulhddul.github.io/categories/Invest/"/>
    
    
      <category term="Invest" scheme="https://ddulhddul.github.io/tags/Invest/"/>
    
  </entry>
  
  <entry>
    <title>STOCK - 스튜디오드래곤</title>
    <link href="https://ddulhddul.github.io/2021/05/09/invest/STOCK%20-%20%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4%EB%93%9C%EB%9E%98%EA%B3%A4/"/>
    <id>https://ddulhddul.github.io/2021/05/09/invest/STOCK - 스튜디오드래곤/</id>
    <published>2021-05-08T15:00:00.000Z</published>
    <updated>2021-05-08T15:04:42.113Z</updated>
    
    <content type="html"><![CDATA[<p>cj계열</p><p>미국의 컨텐츠 별점매기는 imdb에서<br>미국거를 제외하고 이 회사가 별점높은 컨텐츠를 가장 많이 공급하는 회사.</p><p>드라마 많이 만드는<br>스위트홈, 보이스, 시그널 등등</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;cj계열&lt;/p&gt;
&lt;p&gt;미국의 컨텐츠 별점매기는 imdb에서&lt;br&gt;미국거를 제외하고 이 회사가 별점높은 컨텐츠를 가장 많이 공급하는 회사.&lt;/p&gt;
&lt;p&gt;드라마 많이 만드는&lt;br&gt;스위트홈, 보이스, 시그널 등등&lt;/p&gt;

      
    
    </summary>
    
      <category term="Invest" scheme="https://ddulhddul.github.io/categories/Invest/"/>
    
    
      <category term="Invest" scheme="https://ddulhddul.github.io/tags/Invest/"/>
    
  </entry>
  
  <entry>
    <title>알트코인 - API</title>
    <link href="https://ddulhddul.github.io/2021/04/28/invest/blog/210428%20API3/"/>
    <id>https://ddulhddul.github.io/2021/04/28/invest/blog/210428 API3/</id>
    <published>2021-04-27T15:00:00.000Z</published>
    <updated>2021-05-08T15:05:50.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vega-xyz-API3-API3"><a href="#vega-xyz-API3-API3" class="headerlink" title="vega.xyz: API3 (API3)"></a>vega.xyz: API3 (API3)</h1><p><img src="http://res.heraldm.com/content/image/2021/04/20/20210420000440_0.jpg" alt="logo"></p><ul><li><a href="https://api3.org/" target="_blank" rel="noopener">https://api3.org/</a></li><li>이더 리움의 블록 체인에서 발행되는 토큰입니다.</li><li>현재 7천원즈음</li><li>업비트 상장 전</li><li>API3 builds blockchain-native, decentralized APIs with DAO-governance and quantifiable security.</li><li>2021.04.20 : <a href="http://news.heraldcorp.com/view.php?ud=20210420000454" target="_blank" rel="noopener">오픈 뱅크 프로젝트, API3와 10년 MOU 협약… 디파이와 은행 연결 가능성 보여</a><ul><li>뱅킹 산업에서 선두적인API(Application Programming Interface)로서 활동하고 있는 오픈 뱅크 프로젝트와의 파트너십 체결을 통해서 개발자들은 400개가 넘는 뱅킹 API들을 활용해 실제 금융 시장과 탈중앙 금융(DeFi, 디파이)을 연결하는 다양한 시도를 할 수 있게 될 것이라는 전망이다.</li><li>API3는 <strong>체인링크</strong>(Chainlink)와 같은 기존 오라클 솔루션들에 존재하던 중간자 문제를 해결하며 데이터 제공자의 API 서비스 운영 비용을 축소시켜줄 뿐만 아니라 데이터 소비자들이 API 사용하는 데 있어 더 저렴하게 이용할 수 있도록 만들어준다.</li><li>GDPR 준수 인증 확인을 받았다. </li></ul></li><li><a href="https://ko.xangle.io/project/API3/key-info" target="_blank" rel="noopener">https://ko.xangle.io/project/API3/key-info</a><ul><li>시가총액이 좀 높네.. 1조가 넘음</li></ul></li></ul><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p><img src="https://github.githubassets.com/images/modules/site/icons/footer/github-mark.svg" alt="logo"></p><h2 id="트위터"><a href="#트위터" class="headerlink" title="트위터"></a>트위터</h2><h2 id="커뮤니티"><a href="#커뮤니티" class="headerlink" title="커뮤니티"></a>커뮤니티</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vega-xyz-API3-API3&quot;&gt;&lt;a href=&quot;#vega-xyz-API3-API3&quot; class=&quot;headerlink&quot; title=&quot;vega.xyz: API3 (API3)&quot;&gt;&lt;/a&gt;vega.xyz: API3 (API3)&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="Invest" scheme="https://ddulhddul.github.io/categories/Invest/"/>
    
    
      <category term="Invest" scheme="https://ddulhddul.github.io/tags/Invest/"/>
    
  </entry>
  
  <entry>
    <title>알트코인 - PROPS</title>
    <link href="https://ddulhddul.github.io/2021/04/28/invest/blog/210428%20PROPS/"/>
    <id>https://ddulhddul.github.io/2021/04/28/invest/blog/210428 PROPS/</id>
    <published>2021-04-27T15:00:00.000Z</published>
    <updated>2021-05-08T15:05:30.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="propsproject-com-Props-Token-PROPS"><a href="#propsproject-com-Props-Token-PROPS" class="headerlink" title="propsproject.com: Props Token (PROPS)"></a>propsproject.com: Props Token (PROPS)</h1><ul><li><a href="https://www.propsproject.com/" target="_blank" rel="noopener">공식 사이트</a></li><li>설립일: 2011-04</li><li>공시<ul><li><a href="https://ko.xangle.io/project/PROPS/recent-disclosure" target="_blank" rel="noopener">https://ko.xangle.io/project/PROPS/recent-disclosure</a></li></ul></li><li>okex 에 상장되어있음. 살만할듯 ? (가격 범핑 없었음)<ul><li><a href="https://www.okex.com/ko/markets/prices/props-token-props" target="_blank" rel="noopener">https://www.okex.com/ko/markets/prices/props-token-props</a></li><li>시가 총액 $16.53M</li></ul></li></ul><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p><img src="https://github.githubassets.com/images/modules/site/icons/footer/github-mark.svg" alt="logo"></p><h2 id="트위터"><a href="#트위터" class="headerlink" title="트위터"></a>트위터</h2><h2 id="커뮤니티"><a href="#커뮤니티" class="headerlink" title="커뮤니티"></a>커뮤니티</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;propsproject-com-Props-Token-PROPS&quot;&gt;&lt;a href=&quot;#propsproject-com-Props-Token-PROPS&quot; class=&quot;headerlink&quot; title=&quot;propsproject.com: Props 
      
    
    </summary>
    
      <category term="Invest" scheme="https://ddulhddul.github.io/categories/Invest/"/>
    
    
      <category term="Invest" scheme="https://ddulhddul.github.io/tags/Invest/"/>
    
  </entry>
  
  <entry>
    <title>알트코인 - CONV</title>
    <link href="https://ddulhddul.github.io/2021/04/28/invest/blog/210428%20CONV/"/>
    <id>https://ddulhddul.github.io/2021/04/28/invest/blog/210428 CONV/</id>
    <published>2021-04-27T15:00:00.000Z</published>
    <updated>2021-05-08T15:05:41.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Convergence-CONV"><a href="#Convergence-CONV" class="headerlink" title="Convergence (CONV)"></a>Convergence (CONV)</h1><ul><li><p>공시</p><ul><li><a href="https://ko.xangle.io/project/CONV/recent-disclosure" target="_blank" rel="noopener">https://ko.xangle.io/project/CONV/recent-disclosure</a></li><li>okex 에 상장되어있음. 살만할듯 ? (가격 범핑 없었음)</li><li>비교적 최근 상장</li></ul></li><li><p>컨버전스 프로토콜은 주식·채권·펀드·미술품·부동산 등 다양한 자산군들을 증권형 토큰(Security Token)으로 발행한 뒤에 퍼블릭(공개형) 블록체인에서 거래할 수 있도록 도와주는 플랫폼이다.</p><ul><li><a href="https://www.hankyung.com/economy/article/202102269943g" target="_blank" rel="noopener">https://www.hankyung.com/economy/article/202102269943g</a></li></ul></li></ul><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p><img src="https://github.githubassets.com/images/modules/site/icons/footer/github-mark.svg" alt="logo"></p><h2 id="트위터"><a href="#트위터" class="headerlink" title="트위터"></a>트위터</h2><h2 id="커뮤니티"><a href="#커뮤니티" class="headerlink" title="커뮤니티"></a>커뮤니티</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Convergence-CONV&quot;&gt;&lt;a href=&quot;#Convergence-CONV&quot; class=&quot;headerlink&quot; title=&quot;Convergence (CONV)&quot;&gt;&lt;/a&gt;Convergence (CONV)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;공
      
    
    </summary>
    
      <category term="Invest" scheme="https://ddulhddul.github.io/categories/Invest/"/>
    
    
      <category term="Invest" scheme="https://ddulhddul.github.io/tags/Invest/"/>
    
  </entry>
  
  <entry>
    <title>알트코인 - 베가프로토콜</title>
    <link href="https://ddulhddul.github.io/2021/04/28/invest/blog/210428%20%EB%B2%A0%EA%B0%80%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%20copy/"/>
    <id>https://ddulhddul.github.io/2021/04/28/invest/blog/210428 베가프로토콜 copy/</id>
    <published>2021-04-27T15:00:00.000Z</published>
    <updated>2021-05-08T15:06:00.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vega-xyz-Vega-Protocol"><a href="#vega-xyz-Vega-Protocol" class="headerlink" title="vega.xyz: [Vega Protocol]"></a>vega.xyz: [Vega Protocol]</h1><p><img src="https://avatars.githubusercontent.com/u/37143699?s=200&amp;v=4" alt="logo"></p><ul><li><a href="https://vega.xyz/" target="_blank" rel="noopener">https://vega.xyz/</a></li><li>탈중앙화 트레이딩 기술 프로젝트</li><li><a href="https://platum.kr/archives/129173" target="_blank" rel="noopener">해시드, 탈중앙화 트레이딩 기술 프로젝트 ‘베가(Vega)’ 투자</a> 2019/10/04</li></ul><h2 id="ICO"><a href="#ICO" class="headerlink" title="ICO"></a>ICO</h2><p><img src="https://icodrops.com/wp-content/uploads/2017/09/LogoDrops.png" alt="logo"></p><ul><li><a href="https://icodrops.com/vega-protocol-2/" target="_blank" rel="noopener">https://icodrops.com/vega-protocol-2/</a><ul><li>Token Sale - SOON</li></ul></li></ul><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p><img src="https://github.githubassets.com/images/modules/site/icons/footer/github-mark.svg" alt="logo"></p><ul><li><a href="https://github.com/vegaprotocol/" target="_blank" rel="noopener">https://github.com/vegaprotocol/</a></li></ul><h2 id="트위터"><a href="#트위터" class="headerlink" title="트위터"></a>트위터</h2><ul><li><a href="https://twitter.com/vegaprotocol" target="_blank" rel="noopener">https://twitter.com/vegaprotocol</a></li></ul><h2 id="커뮤니티"><a href="#커뮤니티" class="headerlink" title="커뮤니티"></a>커뮤니티</h2><ul><li>블로그<ul><li><a href="https://blog.vega.xyz/" target="_blank" rel="noopener">https://blog.vega.xyz/</a></li></ul></li><li>커뮤니티<ul><li><a href="https://community.vega.xyz/" target="_blank" rel="noopener">https://community.vega.xyz/</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vega-xyz-Vega-Protocol&quot;&gt;&lt;a href=&quot;#vega-xyz-Vega-Protocol&quot; class=&quot;headerlink&quot; title=&quot;vega.xyz: [Vega Protocol]&quot;&gt;&lt;/a&gt;vega.xyz: [Vega P
      
    
    </summary>
    
      <category term="Invest" scheme="https://ddulhddul.github.io/categories/Invest/"/>
    
    
      <category term="Invest" scheme="https://ddulhddul.github.io/tags/Invest/"/>
    
  </entry>
  
  <entry>
    <title>알트코인 - 해시드코인정리</title>
    <link href="https://ddulhddul.github.io/2021/04/24/invest/blog/210424%20%ED%95%B4%EC%8B%9C%EB%93%9C%EC%BD%94%EC%9D%B8%EC%A0%95%EB%A6%AC/"/>
    <id>https://ddulhddul.github.io/2021/04/24/invest/blog/210424 해시드코인정리/</id>
    <published>2021-04-23T15:00:00.000Z</published>
    <updated>2021-05-08T15:06:14.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="해시드-Hashed"><a href="#해시드-Hashed" class="headerlink" title="해시드 (Hashed)"></a><a href="https://www.hashed.com/" target="_blank" rel="noopener">해시드 (Hashed)</a></h1><ul><li>한국의 블록체인 분야의 전문 투자업체이다.</li><li><a href="http://wiki.hash.kr/index.php/%ED%95%B4%EC%8B%9C%EB%93%9C" target="_blank" rel="noopener">위키</a></li><li><a href="http://wiki.hash.kr/index.php/%EA%B9%80%EC%84%9C%EC%A4%80" target="_blank" rel="noopener">대표 김서준</a></li><li>12명으로 시작한 소규모 팀이 18개월만에 400배 이상 돈을 불리고 서울과 샌프란시스코에 사무실을 두고 있다</li><li>액셀러레이터(accelerator)란 초기 벤처기업이나 스타트업을 발굴해 사업자금 지원, 업무공간 제공, 경영 컨설팅, 홍보 및 마케팅 등을 지원하는 투자업체나 단체를 말한다. </li><li>혁신적인 탈중앙화 프로젝트를 발굴하고, 투자하며, 지원하기 위해 만들어졌다. </li><li>해시드는 블록체인 댑 액셀러레이팅 프로그램 <a href="http://wiki.hash.kr/index.php/%ED%95%B4%EC%8B%9C%EB%93%9C%EB%9E%A9%EC%8A%A4" target="_blank" rel="noopener">해시드랩스</a>를 운영하고 있다.</li></ul><h2 id="상장-되어있음"><a href="#상장-되어있음" class="headerlink" title="상장 되어있음"></a>상장 되어있음</h2><ul><li>tomochain.com</li><li>bzx.network</li><li>linear.finance</li><li>terravirtua.io</li></ul><h2 id="상장-안되어있음"><a href="#상장-안되어있음" class="headerlink" title="상장 안되어있음"></a>상장 안되어있음</h2><ul><li>vega.xyz: Vega Protocol</li><li>insurace.io: InsurAce (INSUR)</li><li>api3.org: API3 (API3)</li><li><strong>conv.finance: Convergence (CONV)</strong> -&gt; 꼭</li><li><strong>pluto.network: Pluto (PLUT)</strong> -&gt; 고려 (5배.. ?)</li><li><strong>kambria.io: Kambria (KAT)</strong> -&gt; 고려</li><li><strong>nucypher.com: NuCypher (NU)</strong> -&gt; 고려</li><li>handshake.org: Handshake (HNS)</li><li>hmt.ai: Human Protocol AMA (HMT)</li><li><strong>propsproject.com: Props Token (PROPS)</strong> -&gt; 꼭</li><li>scrt.network: Secret (SCRT)</li><li><strong>quantstamp.com: Quantstamp (QSP)</strong> -&gt; 고려</li></ul><h3 id="코인-리스트-https-www-hashed-com-portfolio"><a href="#코인-리스트-https-www-hashed-com-portfolio" class="headerlink" title="코인 리스트 : https://www.hashed.com/portfolio"></a>코인 리스트 : <a href="https://www.hashed.com/portfolio" target="_blank" rel="noopener">https://www.hashed.com/portfolio</a></h3><ul><li>klaytn.com</li><li>link.network</li><li><a href="https://www.oasislabs.com/" target="_blank" rel="noopener">oasislabs.com</a> ?? 패스</li><li><a href="https://dfinity.org/foundation" target="_blank" rel="noopener">dfinity.org</a><ul><li><a href="https://coinmarketcap.com/ko/currencies/dfinity/" target="_blank" rel="noopener">Internet Computer (IOU)</a></li></ul></li><li>skalelabs.com<ul><li><a href="https://coinmarketcap.com/ko/currencies/skale-network/" target="_blank" rel="noopener">SKALE Network (SKL)</a></li><li>지금 타이밍 ?</li></ul></li><li>ttc.eco<ul><li><a href="https://coinmarketcap.com/ko/currencies/ttcrypto/" target="_blank" rel="noopener">TTCRYPTO (TTC)</a></li><li>하락?</li></ul></li><li>wireline.io<ul><li><a href="https://www.coingecko.com/ko/%EC%BD%94%EC%9D%B8/wireline" target="_blank" rel="noopener">Wireline (WRL)</a></li><li>마켓캡에 안나옴</li></ul></li><li>ont.io<ul><li>[온톨로지 (ont)]</li><li>업비트, 코인원 상장되어있음.</li><li>고점대비(17000원, 현재 1800) 엄청 내려가있는상태인데, 괜찮은거 아닌가 ? 조사해보기</li></ul></li><li><strong>tomochain.com</strong><ul><li>토모체인 (TOMOE)</li><li><strong>코인원 상장되어있음. (업비트아직 !!)</strong></li><li>고점대비(17000원, 현재 1800) 엄청 내려가있는상태인데 ?? </li></ul></li><li>icon.foundation<ul><li>아이콘 (ICON)</li></ul></li><li>cosmos.network<ul><li>Cosmos (ATOM)</li></ul></li><li>eos.io</li><li>ethereum.org</li><li>terra.money<ul><li>Terra (LUNA)</li><li>업비트 BTC 마켓</li></ul></li><li>chai.finance ???</li><li>kyber.network<ul><li>Kyber Network (KNC)</li><li>변동이 심하지 않았음. 크게 내리지 않았음.</li><li><a href="https://webruden.tistory.com/622" target="_blank" rel="noopener">카이버 네트워크 시세 및 전망</a></li><li>업빗 상장되어있음.</li></ul></li><li>invest.lendit.co.kr<ul><li>P2P 투자에 도전해보자 랜딧(Lendit) 연10%수익률!</li></ul></li><li>matter-labs.io<ul><li>매터랩스(Matter Labs)는 영지식증명으로 블록체인의 확장성 과제를 해결하는 연구 및 개발 회사이다. 본사는 미국 캘리포니아에 있다.</li></ul></li><li><p><strong>vega.xyz</strong></p><ul><li>Vega Protocol</li><li><a href="https://coinpaprika.com/ko/ico-project/vega-vega-protocol/" target="_blank" rel="noopener">ICO</a></li><li>Vega is a technology protocol and associated crypto-asset for an open, blockchain-backed public network for fully automated end to-end trading and execution of financial products.</li><li><a href="https://twitter.com/vegaprotocol" target="_blank" rel="noopener">https://twitter.com/vegaprotocol</a></li><li><a href="https://www.crunchbase.com/organization/vega-protocol" target="_blank" rel="noopener">https://www.crunchbase.com/organization/vega-protocol</a></li></ul></li><li><p>pundix.com</p><ul><li>펀디엑스 (PUNDIX)</li><li>업비트 상장완료</li></ul></li><li><p>makerdao.com</p><ul><li>MakerDAO는 암호화폐를 담보로 운용하며 탈중앙화된 방식으로 스테이블코인 시스템을 운영하고 있다. </li><li>스테이블 코인이면 흠…</li></ul></li><li><p>omisego.co</p><ul><li>오미세고</li><li>업비트 상장완료</li></ul></li><li><p>psx.or.kr</p><ul><li>비상장 주식 거래 플랫폼 PSX, 해시드서 20억 추가 투자 유치</li><li>지난 4월 금융위원회 혁신금융서비스 업체로 선정된 비상장 주식 거래 플랫폼 피에스엑스(PSX)가 자사 서비스 명칭을 판교거래소에서 서울거래소로 바꾸고, 내달 1일 비상장 주식 거래 서비스를 정식 출시한다.</li></ul></li><li><p>tokensets.com</p><ul><li>Set is a protocol that bundles crypto-assets into tokenized baskets that are programmed to automatically restructure based on any management or trading logic.</li></ul></li><li><p>synthetix.io</p><ul><li>Synthetix (SNX)</li><li>업비트 BTC 마켓 상장완료</li></ul></li><li><p><strong>bzx.network</strong></p><ul><li>비지엑스 프로토콜 (BZRX)</li><li>코인원만 상장완료</li><li>해볼만한듯 현재 770원</li></ul></li></ul><ul><li><strong>linear.finance</strong><ul><li>리니어파이낸스 (LINA)/BTCArrow</li><li>업비트 BTC 마켓만 상장완료</li><li>가격이 해볼만 한듯 82원 예전엔 10원대엿지만…</li><li><a href="https://webruden.tistory.com/733" target="_blank" rel="noopener">리니어 파이낸스(LINA, Linear) 코인 소개 및 시세 전망(호재, 상폐, 스캠 분석)</a></li></ul></li></ul><ul><li><p>injectiveprotocol.com</p><ul><li>Injective Protocol (INJ)</li><li>업비트 BTC 마켓 상장 완료</li></ul></li><li><p><strong>insurace.io</strong></p><ul><li>InsurAce (INSUR)</li><li><a href="https://www.insurace.io" target="_blank" rel="noopener">https://www.insurace.io</a></li><li>계속 5천원대네</li><li>조사해볼만</li><li>업비트 상장 전</li><li>Gate.io는 2021년 4월 1일 13:30(UTC+9)에 InsurAce(INSUR) 거래를 상장할 예정입니다. InsurAce는 DeFi 보험 가입자가 걱정없이 신뢰하고 사용할 수 있도록 보험 서비스를 제공하는 분산형 보험 프로토콜로, 보험료가 매우 저렴하고 지속 가능한 투자수익율이 높습니다. InsurAce는 모든 DeFi 보험에 편견이 없으며, 경쟁을 원치 않고 발전하는 DeFi 세계에 필수적인 보완 역할을 합니다.</li></ul></li></ul><ul><li><p><strong>api3.org</strong></p><ul><li>API3 (API3)</li><li><a href="https://api3.org/" target="_blank" rel="noopener">https://api3.org/</a></li><li>이더 리움의 블록 체인에서 발행되는 토큰입니다.</li><li>현재 7천원즈음</li><li>업비트 상장 전</li><li>API3 builds blockchain-native, decentralized APIs with DAO-governance and quantifiable security.</li></ul></li><li><p>mirror.finance</p><ul><li>미러 프로토콜 (MIR)</li><li>코인원에만 상장</li></ul></li><li><p>anchorprotocol.com</p><ul><li>Anchor Protocol (ANC)</li><li>5$</li><li><a href="https://mindwatching.kr/507" target="_blank" rel="noopener">테라가 만든 놀라운 디파이 - 앵커 프로토콜 투자 방법</a></li><li>앵커 프로토콜은 스테이블 코인을 예치하면 20% 의 고정 이율로 이자 수익을 주는 서비스입니다.</li></ul></li></ul><ul><li><p>dydx.exchange</p><ul><li>dYdX는 2019년 서비스 출시 이후 누적 거래액만 50억달러(약 5조6559억원)에 육박하면서 탈중앙화 선물 거래소 중 가장 많은 거래액을 기록하고 있다</li></ul></li><li><p><strong>conv.finance</strong></p><ul><li>Convergence (CONV)</li><li>103원 지켜보자</li><li>상장 전</li><li>어제 uni 상장하자마자 MXC랑 OKEX 상장하고</li><li></li></ul></li></ul><ul><li>mythical.games<ul><li>[EOS 기반 게임 제작사 Mythical Games 180억 투자 </li><li>Mythical Games is a next-generation game technology studio at the intersection of blockchain and games.</li><li><a href="https://coinpaprika.com/ko/ico-project/ico-mythical-games/" target="_blank" rel="noopener">https://coinpaprika.com/ko/ico-project/ico-mythical-games/</a></li></ul></li></ul><ul><li>sandbox.game<ul><li>샌드박스 (SAND)/KRWArrow</li></ul></li></ul><ul><li>axieinfinity.com<ul><li>Axie Infinity (AXS)</li><li>업비트 상장완료</li></ul></li></ul><ul><li><p>cryptoswordandmagic.com</p></li><li><p>nodebrick.com</p></li><li><p>medibloc.org</p><ul><li>메디블록</li><li>업비트 상장완료</li></ul></li><li><p><strong>pluto.network</strong></p><ul><li>Pluto (PLUT)</li><li>144원 // 업비트 상장 안됨</li></ul></li><li><p>blaster.games</p></li><li><p><strong>kambria.io</strong></p><ul><li>Kambria (KAT)</li><li>업비트 상장 전 7.6원</li></ul></li><li><p>carryprotocol.io</p><ul><li>캐리프로토콜CRE/KRWArrow</li><li>업비트 상장완료</li></ul></li><li><p>voithru.com</p></li><li><p>planetariumhq.com</p></li><li>oxopolitics.com</li><li>nextunicorn.kr</li><li>farmmorning.com</li><li><p>headfone.co.in</p></li><li><p><strong>terravirtua.io</strong></p><ul><li>Terra Virtua Kolect (TVK)</li><li>449.80원</li><li>코인원만 상장되어있음.</li></ul></li><li><p><strong>nucypher.com</strong></p><ul><li>NuCypher (NU)</li><li>업비트 상장안됨</li></ul></li><li><p><strong>handshake.org</strong></p><ul><li>Handshake (HNS)</li><li>업비트 상장안됨</li></ul></li><li><p><strong>hmt.ai</strong></p><ul><li>Human Protocol AMA (HMT)</li><li><a href="https://mychew8314.tistory.com/364" target="_blank" rel="noopener">https://mychew8314.tistory.com/364</a></li><li>₩590.91</li><li>업비트 상장안됨</li></ul></li><li><p><strong>propsproject.com</strong></p><ul><li>Props Token (PROPS)</li><li>업비트 상장안됨</li></ul></li><li><p>basicattentiontoken.org</p><ul><li>Basic Attention Token (BAT) </li><li>업비트 상장완료</li></ul></li><li><p>xchng.io</p><ul><li>???</li></ul></li><li><p>originprotocol.com</p><ul><li>Origin Protocol (OGN)</li><li>업비트 btc 상장완료</li></ul></li></ul><ul><li><p><strong>scrt.network</strong></p><ul><li>Secret (SCRT)</li><li>업비트 상장전</li></ul></li><li><p><strong>quantstamp.com</strong></p><ul><li>Quantstamp (QSP)</li><li>업비트 상장전</li></ul></li><li><p>duneanalytics.com</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;해시드-Hashed&quot;&gt;&lt;a href=&quot;#해시드-Hashed&quot; class=&quot;headerlink&quot; title=&quot;해시드 (Hashed)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.hashed.com/&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="Invest" scheme="https://ddulhddul.github.io/categories/Invest/"/>
    
    
      <category term="Invest" scheme="https://ddulhddul.github.io/tags/Invest/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ddulhddul.github.io/2019/06/06/hello-world/"/>
    <id>https://ddulhddul.github.io/2019/06/06/hello-world/</id>
    <published>2019-06-06T10:04:52.489Z</published>
    <updated>2019-06-06T10:04:52.489Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>케라스맛 Chapter7] 케라스로 구현하는 GAN (생성적 적대 신경망)</title>
    <link href="https://ddulhddul.github.io/2018/05/04/DeepLearning/ml027/"/>
    <id>https://ddulhddul.github.io/2018/05/04/DeepLearning/ml027/</id>
    <published>2018-05-04T08:00:52.000Z</published>
    <updated>2019-06-06T10:04:52.487Z</updated>
    
    <content type="html"><![CDATA[<ul><li>경쟁하여 최적화를 수행하는 생성형 신경망.</li><li>내부의 두 신경망이 상호 경쟁하면서 학습.<ul><li>하나는 생성망, 하나는 판별망</li></ul></li></ul><h1 id="7-1-GAN의-원리"><a href="#7-1-GAN의-원리" class="headerlink" title="7.1 GAN의 원리"></a>7.1 GAN의 원리</h1><p>경쟁적 학습 방법을 이용하는 생성형 인공지능</p><h2 id="7-1-1-GAN-의-목적과-개념"><a href="#7-1-1-GAN-의-목적과-개념" class="headerlink" title="7.1.1 GAN 의 목적과 개념"></a>7.1.1 GAN 의 목적과 개념</h2><ul><li>실제 데이터와 비슷한 확률분포를 가지는 허구데이터를 생성</li><li><p>실제 데이터로 얼굴 사진을 제공하면, 비슷한 확률분포를 가지는 새로운 허구 사진을 생성</p></li><li><p>레이블이 없는 정보를 다루는 비지도학습</p></li><li>입력데이터는 무작위 잡음. 출력데이터와 상광벗이 때문에 비지도형의 생성형 신경망이다.</li><li>출력데이터를 특정 분포도를 갖는 데이터로 가정. (ex_ 필기체 숫자, 사람얼굴사진)</li><li>잡음은 무한한 변위가 가능하므로, 학습에 사용한 어떤 데이터와도 완전히 같지 않다.</li></ul><h2 id="7-1-2-GAN의-구조"><a href="#7-1-2-GAN의-구조" class="headerlink" title="7.1.2 GAN의 구조"></a>7.1.2 GAN의 구조</h2><ul><li>경쟁적인 방법으로 학습을 수행<ul><li>판별망은 실제 데이터인지 허구데이터인지 더 잘 구분하도록 학습</li><li>생성망은 판별망을 더 잘 속이도록 학습</li><li>두 과정을 계속 순환</li></ul></li><li>목적은 학습한 실제 데이터와 같은 확률 분포를 가지는 새로운 허구 데이터를 만들도록 생성망을 학습시키는 것.</li></ul><p><img src="https://www.naverlabs.com/naverlabs_/story/201712/1513772298204_%EB%8F%84%EC%8B%9D1.jpg" alt="https://www.naverlabs.com/naverlabs_/story/201712/1513772298204_%EB%8F%84%EC%8B%9D1.jpg"><br><code>출처 : https://www.naverlabs.com/storyDetail/44</code></p><h2 id="7-1-3-GAN의-동작-원리"><a href="#7-1-3-GAN의-동작-원리" class="headerlink" title="7.1.3 GAN의 동작 원리"></a>7.1.3 GAN의 동작 원리</h2><ul><li>생성망<ul><li>생성망은 저차원 무작위 잡음을 입력받아 고차원 허구이미지를 생성</li><li>실제 이미지를 학습하여 실제 이미지와 확률 분포가 최대한 비슷하도록 허구 이미지를 만든다.</li><li>생성망이 만든 허구이미지를 판별망이 실제 이미지로 착각하도록 만드는 방향으로 생성망 학습이 이루어진다.</li></ul></li><li>판별망<ul><li>입력된 이미지가 실제인지 허구인지 판별</li><li>문제는 실제 이미지는 변하지 않지만 허구 이미지는 생성망의 학습이 진행됨에 따라 점점 실제 이미지와 유사해진다는 것</li><li>그래서 앞서 만들어진 이미지를 판별할 수 있도록 점진적으로 학습이 진행된다.</li><li>상호 공진화 하는 방식</li></ul></li><li>판별과 생성시 합성곱 계층을 활용하면 완전 연결 계층보다 효율적 처리 가능.</li></ul><h2 id="7-1-4-GAN의-동작-사례"><a href="#7-1-4-GAN의-동작-사례" class="headerlink" title="7.1.4 GAN의 동작 사례"></a>7.1.4 GAN의 동작 사례</h2><p><img src="http://img1.daumcdn.net/thumb/R1920x0/?fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F99ED60435A3BB17430B8B9" alt="http://img1.daumcdn.net/thumb/R1920x0/?fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F99ED60435A3BB17430B8B9"><br><code>출처 : http://artoria.us/7</code></p><ul><li><p>판별망의 동작</p><ul><li>무작위 잡음 벡터 Z를 입력받아 생성망의 결과를 판별</li><li>개별 이미지가 아닌 이미지의 확률분포를 판별</li><li><p>실제 데이터와 생성망이 만든 허구 데이터의 확률 분포 차이를 판별하도록 학습</p></li><li><p>a. 실제 데이터를 1로 판별하는 과정    </p><ul><li>데이터로부터 가져온 샘플<ul><li>일반적인 배치처리.</li></ul></li><li>미분 가능한 판별 함수 D</li><li>1을 출력하려고 노력하는 판별 함수 D<ul><li>정확도가 높은 판별을 위해 신경망으로 구성</li></ul></li></ul></li><li><p>b. 허구 데이터를 0으로 판별하는 과정</p><ul><li>무작위 잡음 벡터 Z (생성)</li><li>미분 가능한 생성 함수 G<ul><li>복잡한 확률분포를 변환하기 위해 생성 함수 G를 신경망으로 구성</li></ul></li><li>모델로부터 가져온 샘플</li><li>미분 가능한 판별 함수 D</li><li>0을 출력하려고 노력하는 판별 함수 D</li></ul></li><li><p>판별값은 실제 데이터를 입력하면 1, 생성데이터를 입력하면 0이어야 한다.</p></li><li>생성망의 가중치는 학습이 되지 않도록 고정.</li><li>판별망에 들어가는 데이터는 실제 데이터에서 추출한 배치데이터와 생성망에서 만든 허구 데이터로 구성된다.</li><li>판별망 학습 이후 생성망이 진화하기 때문에 순환적으로 계속 판별망을 학습시킨다.</li></ul></li><li><p>생성망의 동작</p><ul><li>생성망의 결과가 판별망으로 들어가도록 가상 신경망 모델을 구성</li><li>학습용 생성망은 새로운 신경망이 아니라 기존의 생성망과 판별망이 합쳐진 가상 신경망이다.</li><li>학습용 생성망 부분에서 판별망 부분은 학습되지 않도록 가중치를 고정.</li><li>판별망은 무작위 잡음 벡터 Z로부터 생성된 허구 이미지가 얼마나 실제 이미지와 유사한지 판별한 결과를 내게 된다.</li><li>판별한 결과가 모두 실제가 되도록 생성망을 학습</li></ul></li><li><p>진화된 생성망은 또다시 무작위 입력벡터 Z에 대해 이미지 변환을 수행.</p></li><li>이렇게 판별망과 생성망 학습이 한번씩 실행되면 GAN 전체 학습이 한번 수행된 것.</li><li>최적화가 완전히 끝나면 이론적으로 생성망의 결과와 실제 이미지를 판별망이 구분하지 못하게 된다.</li></ul><h1 id="7-2-확률분포-생성을-위한-완전-연결-계층-GAN-구현"><a href="#7-2-확률분포-생성을-위한-완전-연결-계층-GAN-구현" class="headerlink" title="7.2 확률분포 생성을 위한 완전 연결 계층 GAN 구현"></a>7.2 확률분포 생성을 위한 완전 연결 계층 GAN 구현</h1><ul><li>처음 제안된 논문의 예제를 구현하자.</li><li>생성에 사용하는 무작위 잡음 벡터 Z는 균등분포 확률신호, 출력은 정규분포 확률 신호</li></ul><h2 id="7-2-1-패키지-임포트"><a href="#7-2-1-패키지-임포트" class="headerlink" title="7.2.1 패키지 임포트"></a>7.2.1 패키지 임포트</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Conv1D, Reshape, Flatten, Lambda</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> Adam</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_decorate</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    axis = -1 --&gt; last dimension in an array</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    m = K.mean(x, axis=<span class="number">-1</span>, keepdims=<span class="keyword">True</span>)</span><br><span class="line">    d = K.square(x - m)</span><br><span class="line">    <span class="keyword">return</span> K.concatenate([x, d], axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_decorate_shape</span><span class="params">(input_shape)</span>:</span></span><br><span class="line">    shape = list(input_shape)</span><br><span class="line">    <span class="keyword">assert</span> len(shape) == <span class="number">2</span></span><br><span class="line">    shape[<span class="number">1</span>] *= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> tuple(shape)</span><br><span class="line"></span><br><span class="line"> model.add(Lambda(antirectifier, output_shape=antirectifier_output_shape))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lr = <span class="number">2e-4</span>   <span class="number">0.0002</span></span><br><span class="line">adam = Adam(lr=lr, beta_1=<span class="number">0.9</span>, beta_2=<span class="number">0.999</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model_compile</span><span class="params">(model)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> model.compile(loss=<span class="string">'binary_crossentropy'</span>, optimizer=adam, metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GAN</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ni_D, nh_D, nh_G)</span>:</span></span><br><span class="line">        self.ni_D = ni_D</span><br><span class="line">        self.nh_D = nh_D</span><br><span class="line">        self.nh_G = nh_G</span><br><span class="line"></span><br><span class="line">        self.D = self.gen_D()</span><br><span class="line">        self.G = self.gen_G()</span><br><span class="line">        self.GD = self.make_GD()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_D</span><span class="params">(self)</span>:</span></span><br><span class="line">        ni_D = self.ni_D</span><br><span class="line">        nh_D = self.nh_D</span><br><span class="line">        D = models.Sequential()</span><br><span class="line">        D.add(Lambda(add_decorate, output_shape=add_decorate_shape, input_shape=(ni_D,)))</span><br><span class="line">        D.add(Dense(nh_D, activation=<span class="string">'relu'</span>))</span><br><span class="line">        D.add(Dense(nh_D, activation=<span class="string">'relu'</span>))</span><br><span class="line">        D.add(Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>))</span><br><span class="line"></span><br><span class="line">        model_compile(D)</span><br><span class="line">        <span class="keyword">return</span> D</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_G</span><span class="params">(self)</span>:</span></span><br><span class="line">        ni_D = self.ni_D</span><br><span class="line">        nh_G = self.nh_D</span><br><span class="line"></span><br><span class="line">        G = models.Sequential()   (Batch, ni_D)</span><br><span class="line">        G.add(Reshape((ni_D, <span class="number">1</span>), input_shape=(ni_D,)))   (Batch, steps=ni_D, input_dim=<span class="number">1</span>)</span><br><span class="line">        G.add(Conv1D(nh_G, <span class="number">1</span>, activation=<span class="string">'relu'</span>))   (Batch, ni_D, nh_G)</span><br><span class="line">        G.add(Conv1D(nh_G, <span class="number">1</span>, activation=<span class="string">'sigmoid'</span>))   (Batch, ni_D, nh_G)</span><br><span class="line">        G.add(Conv1D(<span class="number">1</span>, <span class="number">1</span>))   (Batch, ni_D, <span class="number">1</span>)</span><br><span class="line">        G.add(Flatten())   (Batch, ni_D)</span><br><span class="line"></span><br><span class="line">        model_compile(G)</span><br><span class="line">        <span class="keyword">return</span> G</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_GD</span><span class="params">(self)</span>:</span></span><br><span class="line">        G, D = self.G, self.D</span><br><span class="line">        GD = models.Sequential()</span><br><span class="line">        GD.add(G)</span><br><span class="line">        GD.add(D)</span><br><span class="line">        D.trainable = <span class="keyword">False</span></span><br><span class="line">        model_compile(GD)</span><br><span class="line">        D.trainable = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> GD</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">D_train_on_batch</span><span class="params">(self, Real, Gen)</span>:</span></span><br><span class="line">        D = self.D</span><br><span class="line">        X = np.concatenate([Real, Gen], axis=<span class="number">0</span>)</span><br><span class="line">        y = np.array([<span class="number">1</span>] * Real.shape[<span class="number">0</span>] + [<span class="number">0</span>] * Gen.shape[<span class="number">0</span>])</span><br><span class="line">        D.train_on_batch(X, y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GD_train_on_batch</span><span class="params">(self, Z)</span>:</span></span><br><span class="line">        GD = self.GD</span><br><span class="line">        y = np.array([<span class="number">1</span>] * Z.shape[<span class="number">0</span>])</span><br><span class="line">        GD.train_on_batch(Z, y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mu, sigma, ni_D)</span>:</span></span><br><span class="line">        self.real_sample = <span class="keyword">lambda</span> n_batch: np.random.normal(mu, sigma, (n_batch, ni_D))</span><br><span class="line">        self.in_sample = <span class="keyword">lambda</span> n_batch: np.random.rand(n_batch, ni_D)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Machine</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n_batch=<span class="number">10</span>, ni_D=<span class="number">100</span>)</span>:</span></span><br><span class="line">        data_mean = <span class="number">4</span></span><br><span class="line">        data_stddev = <span class="number">1.25</span></span><br><span class="line"></span><br><span class="line">        self.n_iter_D = <span class="number">1</span></span><br><span class="line">        self.n_iter_G = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">        self.data = Data(data_mean, data_stddev, ni_D)</span><br><span class="line">        self.gan = GAN(ni_D=ni_D, nh_D=<span class="number">50</span>, nh_G=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        self.n_batch = n_batch</span><br><span class="line">         self.ni_D = ni_D</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train_D</span><span class="params">(self)</span>:</span></span><br><span class="line">        gan = self.gan</span><br><span class="line">        n_batch = self.n_batch</span><br><span class="line">        data = self.data</span><br><span class="line"></span><br><span class="line">         Real data</span><br><span class="line">        Real = data.real_sample(n_batch)   (n_batch, ni_D)</span><br><span class="line">         print(Real.shape)</span><br><span class="line">         Generated data</span><br><span class="line">        Z = data.in_sample(n_batch)   (n_batch, ni_D)</span><br><span class="line">        Gen = gan.G.predict(Z)   (n_batch, ni_D)</span><br><span class="line">         print(Gen.shape)</span><br><span class="line"></span><br><span class="line">        gan.D.trainable = <span class="keyword">True</span></span><br><span class="line">        gan.D_train_on_batch(Real, Gen)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train_GD</span><span class="params">(self)</span>:</span></span><br><span class="line">        gan = self.gan</span><br><span class="line">        n_batch = self.n_batch</span><br><span class="line">        data = self.data</span><br><span class="line">         Seed data <span class="keyword">for</span> data generation</span><br><span class="line">        Z = data.in_sample(n_batch)</span><br><span class="line"></span><br><span class="line">        gan.D.trainable = <span class="keyword">False</span></span><br><span class="line">        gan.GD_train_on_batch(Z)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train_each</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> it <span class="keyword">in</span> range(self.n_iter_D):</span><br><span class="line">            self.train_D()</span><br><span class="line">        <span class="keyword">for</span> it <span class="keyword">in</span> range(self.n_iter_G):</span><br><span class="line">            self.train_GD()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, epochs)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">            self.train_each()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self, n_test)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        generate a new image</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        gan = self.gan</span><br><span class="line">        data = self.data</span><br><span class="line">        Z = data.in_sample(n_test)</span><br><span class="line">        Gen = gan.G.predict(Z)</span><br><span class="line">        <span class="keyword">return</span> Gen, Z</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_hist</span><span class="params">(self, Real, Gen, Z)</span>:</span></span><br><span class="line">        plt.hist(Real.reshape(<span class="number">-1</span>), histtype=<span class="string">'step'</span>, label=<span class="string">'Real'</span>)</span><br><span class="line">        plt.hist(Gen.reshape(<span class="number">-1</span>), histtype=<span class="string">'step'</span>, label=<span class="string">'Generated'</span>)</span><br><span class="line">        plt.hist(Z.reshape(<span class="number">-1</span>), histtype=<span class="string">'step'</span>, label=<span class="string">'Input'</span>)</span><br><span class="line">        plt.legend(loc=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_and_show</span><span class="params">(self, n_test)</span>:</span></span><br><span class="line">        data = self.data</span><br><span class="line">        Gen, Z = self.test(n_test)</span><br><span class="line">        Real = data.real_sample(n_test)</span><br><span class="line">        self.show_hist(Real, Gen, Z)</span><br><span class="line">        Machine.print_stat(Real, Gen)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_epochs</span><span class="params">(self, epochs, n_test)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        train GAN and show the results</span></span><br><span class="line"><span class="string">        for showing, the original and the artificial results will be compared</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.train(epochs)</span><br><span class="line">        self.test_and_show(n_test)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, n_repeat=<span class="number">200</span>, n_show=<span class="number">200</span>, n_test=<span class="number">100</span>)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> range(n_repeat):</span><br><span class="line">            print(<span class="string">'Stage'</span>, ii, <span class="string">'(Epoch: &#123;&#125;)'</span>.format(ii * n_show))</span><br><span class="line">            self.run_epochs(n_show, n_test)</span><br><span class="line">            plt.show()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_stat</span><span class="params">(Real, Gen)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">stat</span><span class="params">(d)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> (np.mean(d), np.std(d))</span><br><span class="line">        print(<span class="string">'Mean and Std of Real:'</span>, stat(Real))</span><br><span class="line">        print(<span class="string">'Mean and Std of Gen:'</span>, stat(Gen))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GAN_Pure</span><span class="params">(GAN)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ni_D, nh_D, nh_G)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        Discriminator input is not added</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        super().__init__(ni_D, nh_D, nh_G)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_D</span><span class="params">(self)</span>:</span></span><br><span class="line">        ni_D = self.ni_D</span><br><span class="line">        nh_D = self.nh_D</span><br><span class="line">        D = models.Sequential()</span><br><span class="line">         D.add(Lambda(add_decorate, output_shape=add_decorate_shape, input_shape=(ni_D,)))</span><br><span class="line">        D.add(Dense(nh_D, activation=<span class="string">'relu'</span>, input_shape=(ni_D,)))</span><br><span class="line">        D.add(Dense(nh_D, activation=<span class="string">'relu'</span>))</span><br><span class="line">        D.add(Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>))</span><br><span class="line"></span><br><span class="line">        model_compile(D)</span><br><span class="line">        <span class="keyword">return</span> D</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Machine_Pure</span><span class="params">(Machine)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n_batch=<span class="number">10</span>, ni_D=<span class="number">100</span>)</span>:</span></span><br><span class="line">        data_mean = <span class="number">4</span></span><br><span class="line">        data_stddev = <span class="number">1.25</span></span><br><span class="line"></span><br><span class="line">        self.data = Data(data_mean, data_stddev, ni_D)</span><br><span class="line">        self.gan = GAN_Pure(ni_D=ni_D, nh_D=<span class="number">50</span>, nh_G=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        self.n_batch = n_batch</span><br><span class="line">         self.ni_D = ni_D</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    machine = Machine(n_batch=<span class="number">1</span>, ni_D=<span class="number">100</span>)</span><br><span class="line">    machine.run(n_repeat=<span class="number">200</span>, n_show=<span class="number">200</span>, n_test=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><pre><code class="python"></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;경쟁하여 최적화를 수행하는 생성형 신경망.&lt;/li&gt;
&lt;li&gt;내부의 두 신경망이 상호 경쟁하면서 학습.&lt;ul&gt;
&lt;li&gt;하나는 생성망, 하나는 판별망&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;7-1-GAN의-원리&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="DeepLearning" scheme="https://ddulhddul.github.io/categories/DeepLearning/"/>
    
    
      <category term="DeepLearning" scheme="https://ddulhddul.github.io/tags/DeepLearning/"/>
    
      <category term="코딩셰프의 3분 딥러닝, 케라스맛" scheme="https://ddulhddul.github.io/tags/%EC%BD%94%EB%94%A9%EC%85%B0%ED%94%84%EC%9D%98-3%EB%B6%84-%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%BC%80%EB%9D%BC%EC%8A%A4%EB%A7%9B/"/>
    
  </entry>
  
  <entry>
    <title>케라스맛 Chapter4] 케라스로 구현하는 CNN (합성곱신경망)</title>
    <link href="https://ddulhddul.github.io/2018/04/15/DeepLearning/ml012/"/>
    <id>https://ddulhddul.github.io/2018/04/15/DeepLearning/ml012/</id>
    <published>2018-04-15T11:00:52.000Z</published>
    <updated>2019-06-06T10:04:52.486Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>영상처리에 많이 활용되는 합성곱을 이용하는 인공신경망 기술.</p></blockquote><h1 id="4-1-CNN-원리"><a href="#4-1-CNN-원리" class="headerlink" title="4.1 CNN 원리"></a>4.1 CNN 원리</h1><ul><li><p>합성곱 필터를 이용해 신경망 동작을 수행.</p><ul><li>합성곱계층 : 특징점을 효과적으로 찾는데 활용.</li><li>완전연결계층 : 찾으나 특징점을 기반으로 이미지를 분류하는데 주로 활용.<blockquote><p>주 목적은 그렇지만… 스스로 학습해 신경망이 최적화되기 때문에 그역할이 적정하게 둘에 분배된다. 한쪽이 절대적으로 특정 역할을 하는게 아니다.</p></blockquote></li></ul></li><li><p>CNN과 DNN 비교</p><ul><li>DNN은 이미지를 1차원 벡터로 변환하여 처리하기 때문에 2차원 특성을 처리하기엔 한계가 있다.</li><li>반면 CNN은 2차원 이상의 데이터 처리에 적합하다. </li><li>CNN 은 이미지의 높이와 넓이를 생각하며 2차원 처리를 수행.</li></ul></li><li><p>CNN 은 합성곱 계층이 끝나면 맥스풀링 계층을 이용해 각 지역별로 최댓값을 찾아줘서 특징점 위치가 약간씩 달라져도 딥러닝을 제대로 수행한다.</p></li></ul><h1 id="4-2-필기체를-분류하는-CNN-구현"><a href="#4-2-필기체를-분류하는-CNN-구현" class="headerlink" title="4.2 필기체를 분류하는 CNN 구현"></a>4.2 필기체를 분류하는 CNN 구현</h1><ul><li>4.2.1 분류 CNN 모델링</li><li>4.2.2 분류 CNN을 위한 데이터 준비  </li><li>4.2.3 학습 효과 분석</li><li>4.2.3 분류 CNN 학습 및 테스트</li></ul><h2 id="4-2-1-분류-CNN-모델링"><a href="#4-2-1-분류-CNN-모델링" class="headerlink" title="4.2.1 분류 CNN 모델링"></a>4.2.1 분류 CNN 모델링</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###############################</span></span><br><span class="line"><span class="comment"># 분류 CNN 모델링</span></span><br><span class="line"><span class="comment">###############################</span></span><br><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> models, layers</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="comment"># 딥러닝 엔진들 함수를 직접 호출하거나 주요 파라미터 제어</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNN</span><span class="params">(models.Sequential)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_shape, num_classes)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 3X3 커널 32개로 구성된 합성곱 계층</span></span><br><span class="line">        self.add(layers.Conv2D(<span class="number">32</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                 activation=<span class="string">'relu'</span>,</span><br><span class="line">                 input_shape=input_shape))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 64커널수, Maxpooling 이 부속계층으로 있음. (가중치가 바뀌진 않지만 특정한 형태로 변화시키는 계층을 부속계층이라고 한다고 합니다)</span></span><br><span class="line">        self.add(layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>))</span><br><span class="line">        self.add(layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">        self.add(layers.Dropout(<span class="number">0.25</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3. 완전연결계층. Flatten : 2차원 이미지를 1차원으로 변화시킴</span></span><br><span class="line">        self.add(layers.Flatten())</span><br><span class="line">        self.add(layers.Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">        self.add(layers.Dropout(<span class="number">0.5</span>))</span><br><span class="line">        self.add(layers.Dense(num_classes, activation=<span class="string">'softmax'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 컴파일</span></span><br><span class="line">        self.compile(loss=keras.losses.categorical_crossentropy,</span><br><span class="line">                      optimizer=<span class="string">'rmsprop'</span>,</span><br><span class="line">                      metrics=[<span class="string">'accuracy'</span>])</span><br></pre></td></tr></table></figure><h2 id="4-2-2-분류-CNN을-위한-데이터-준비"><a href="#4-2-2-분류-CNN을-위한-데이터-준비" class="headerlink" title="4.2.2 분류 CNN을 위한 데이터 준비"></a>4.2.2 분류 CNN을 위한 데이터 준비</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###############################</span></span><br><span class="line"><span class="comment"># 분류 CNN을 위한 데이터 준비  </span></span><br><span class="line"><span class="comment">###############################</span></span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> datasets </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DATA</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        num_classes = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        (x_train, y_train), (x_test, y_test) = datasets.mnist.load_data()</span><br><span class="line">        img_rows, img_cols = x_train.shape[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 흑백 이미지는 채널 정보가 존재하지 않아서, 추가적인 차원을 이미지 데이터에 포함하는 작업.</span></span><br><span class="line">        <span class="keyword">if</span> backend.image_data_format() == <span class="string">'channels_first'</span>:</span><br><span class="line">            <span class="comment"># 샘플수, 채널수, 이미지 가로길이, 이미지세로길이</span></span><br><span class="line">            x_train = x_train.reshape(x_train.shape[<span class="number">0</span>], <span class="number">1</span>, img_rows, img_cols)</span><br><span class="line">            x_test = x_test.reshape(x_test.shape[<span class="number">0</span>], <span class="number">1</span>, img_rows, img_cols)</span><br><span class="line">            input_shape = (<span class="number">1</span>, img_rows, img_cols)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 샘플수, 이미지 가로길이, 이미지세로길이, 채널수</span></span><br><span class="line">            x_train = x_train.reshape(x_train.shape[<span class="number">0</span>], img_rows, img_cols, <span class="number">1</span>)</span><br><span class="line">            x_test = x_test.reshape(x_test.shape[<span class="number">0</span>], img_rows, img_cols, <span class="number">1</span>)</span><br><span class="line">            input_shape = (img_rows, img_cols, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        x_train = x_train.astype(<span class="string">'float32'</span>)</span><br><span class="line">        x_test = x_test.astype(<span class="string">'float32'</span>)</span><br><span class="line">        x_train /= <span class="number">255</span></span><br><span class="line">        x_test /= <span class="number">255</span></span><br><span class="line"></span><br><span class="line">        y_train = keras.utils.to_categorical(y_train, num_classes)</span><br><span class="line">        y_test = keras.utils.to_categorical(y_test, num_classes)</span><br><span class="line">        </span><br><span class="line">        self.input_shape = input_shape</span><br><span class="line">        self.num_classes = num_classes</span><br><span class="line">        self.x_train, self.y_train = x_train, y_train</span><br><span class="line">        self.x_test, self.y_test = x_test, y_test</span><br></pre></td></tr></table></figure><h2 id="4-2-3-학습-효과-분석"><a href="#4-2-3-학습-효과-분석" class="headerlink" title="4.2.3 학습 효과 분석"></a>4.2.3 학습 효과 분석</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###########################</span></span><br><span class="line"><span class="comment"># 학습 효과 분석</span></span><br><span class="line"><span class="comment">###########################</span></span><br><span class="line"><span class="keyword">from</span> keraspp.skeras <span class="keyword">import</span> plot_loss, plot_acc</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><h2 id="4-2-3-분류-CNN-학습-및-테스트"><a href="#4-2-3-분류-CNN-학습-및-테스트" class="headerlink" title="4.2.3 분류 CNN 학습 및 테스트"></a>4.2.3 분류 CNN 학습 및 테스트</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###############################</span></span><br><span class="line"><span class="comment"># 분류 CNN 학습 및 테스트</span></span><br><span class="line"><span class="comment">###############################</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1회 학습시 입력 데이터를 128개씩 나눠서 입력.</span></span><br><span class="line">    batch_size = <span class="number">128</span></span><br><span class="line">    epochs = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    data = DATA()</span><br><span class="line">    model = CNN(data.input_shape, data.num_classes)</span><br><span class="line"></span><br><span class="line">    history = model.fit(data.x_train, data.y_train,</span><br><span class="line">              batch_size=batch_size,</span><br><span class="line">              epochs=epochs,</span><br><span class="line">              <span class="comment"># 검증용 데이터는 학습데이터의 일부를 사용</span></span><br><span class="line">              validation_split=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">    score = model.evaluate(data.x_test, data.y_test)</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">'Test loss:'</span>, score[<span class="number">0</span>])</span><br><span class="line">    print(<span class="string">'Test accuracy:'</span>, score[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    plot_loss(history)</span><br><span class="line">    plt.show()</span><br><span class="line">    plot_acc(history)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="http-localhost-8888-notebooks-nb-ex4-1-cnn-mnist-cl-ipynb"><a href="#http-localhost-8888-notebooks-nb-ex4-1-cnn-mnist-cl-ipynb" class="headerlink" title="http://localhost:8888/notebooks/nb_ex4_1_cnn_mnist_cl.ipynb"></a><a href="http://localhost:8888/notebooks/nb_ex4_1_cnn_mnist_cl.ipynb" target="_blank" rel="noopener">http://localhost:8888/notebooks/nb_ex4_1_cnn_mnist_cl.ipynb</a></h2><h1 id="4-3-컬러-이미지를-분류하는-CNN-구현"><a href="#4-3-컬러-이미지를-분류하는-CNN-구현" class="headerlink" title="4.3 컬러 이미지를 분류하는 CNN 구현"></a>4.3 컬러 이미지를 분류하는 CNN 구현</h1><ul><li>필기체 분류와 크게 다르지 않다.</li><li>CIFAR-10<ul><li>4.3.1 분류 CNN 패키지 임포트</li><li>4.3.2 분류 CNN 모델링</li><li>4.3.3 분류 CNN을 위한 데이터 준비</li><li>4.3.4 분류 CNN의 학습 및 성능 평가를 위한 머신 클래스 구현</li><li>4.3.5 분류 CNN의 학습 및 성능 평가 수행</li></ul></li></ul><h2 id="4-3-1-분류-CNN-패키지-임포트"><a href="#4-3-1-분류-CNN-패키지-임포트" class="headerlink" title="4.3.1 분류 CNN 패키지 임포트"></a>4.3.1 분류 CNN 패키지 임포트</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection, metrics</span><br><span class="line"><span class="comment"># 지정한 최대 최소값을 이용해 입력값 크기 조정</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 케라스 모델링을 위한 서브패키지들</span></span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> np_utils</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Input, Conv2D, MaxPooling2D, Flatten, Dense, Dropout</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> skeras</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> sfile</span><br></pre></td></tr></table></figure><h2 id="4-3-2-분류-CNN-모델링"><a href="#4-3-2-분류-CNN-모델링" class="headerlink" title="4.3.2 분류 CNN 모델링"></a>4.3.2 분류 CNN 모델링</h2><ul><li>LeNet 신경망 모델 사용<ul><li>합성곱 계층 2개, 완전연결계층 1개</li><li>Conv2D(), Maxpoling2D() : 채널에 처리가 있는 계층</li><li>Dense() : 채널에 대한 처리가 없는 계층</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNN</span><span class="params">(Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(model, nb_classes, in_shape=None)</span>:</span></span><br><span class="line">        model.nb_classes = nb_classes</span><br><span class="line">        model.in_shape = in_shape</span><br><span class="line">        model.build_model()</span><br><span class="line">        super().__init__(model.x, model.y)</span><br><span class="line">        model.compile()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_model</span><span class="params">(model)</span>:</span></span><br><span class="line">        nb_classes = model.nb_classes</span><br><span class="line">        in_shape = model.in_shape</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 주어진 입력 이미지의 크기를 처리하는 입력 계층을 정의</span></span><br><span class="line">        x = Input(in_shape)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 합성곱 계층 두 개를 정의</span></span><br><span class="line">        h = Conv2D(<span class="number">32</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>,</span><br><span class="line">                   input_shape=in_shape)(x)</span><br><span class="line">        h = Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>)(h)</span><br><span class="line"></span><br><span class="line">        h = MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))(h) <span class="comment"># 가로세로 두 축으로 반반씩 줄어듬</span></span><br><span class="line">        h = Dropout(<span class="number">0.25</span>)(h)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 합성곱 계층을 완전연결 계층으롤 보내기 위해 플랫턴 작업</span></span><br><span class="line">        <span class="comment"># 3차원 데이터 -&gt; 1차원</span></span><br><span class="line">        h = Flatten()(h)</span><br><span class="line">        z_cl = h</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 완전연결계층의 은닉 계층과 출력 계층</span></span><br><span class="line">        h = Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>)(h)</span><br><span class="line">        h = Dropout(<span class="number">0.5</span>)(h)</span><br><span class="line">        z_fl = h</span><br><span class="line">        y = Dense(nb_classes, activation=<span class="string">'softmax'</span>, name=<span class="string">'preds'</span>)(h)</span><br><span class="line"></span><br><span class="line">        model.cl_part = Model(x, z_cl)</span><br><span class="line">        model.fl_part = Model(x, z_fl)</span><br><span class="line"></span><br><span class="line">        model.x, model.y = x, y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compile</span><span class="params">(model)</span>:</span></span><br><span class="line">        Model.compile(model, loss=<span class="string">'categorical_crossentropy'</span>,</span><br><span class="line">                      optimizer=<span class="string">'adadelta'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br></pre></td></tr></table></figure><h2 id="4-3-3-분류-CNN을-위한-데이터-준비"><a href="#4-3-3-분류-CNN을-위한-데이터-준비" class="headerlink" title="4.3.3 분류 CNN을 위한 데이터 준비"></a>4.3.3 분류 CNN을 위한 데이터 준비</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 데이터를 머신러닝에 사용하기 적합하도록 조정하는 역할</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataSet</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, X, y, nb_classes, scaling=True, test_size=<span class="number">0.2</span>, random_state=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        X is originally vector. Hence, it will be transformed</span></span><br><span class="line"><span class="string">        to 2D images with a channel (i.e, 3D).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.X = X</span><br><span class="line">        self.add_channels()</span><br><span class="line"></span><br><span class="line">        X = self.X</span><br><span class="line">        <span class="comment"># the data, shuffled and split between train and test sets</span></span><br><span class="line">        X_train, X_test, y_train, y_test = model_selection.train_test_split(</span><br><span class="line">            X, y, test_size=<span class="number">0.2</span>, random_state=random_state)</span><br><span class="line"></span><br><span class="line">        print(X_train.shape, y_train.shape)</span><br><span class="line"></span><br><span class="line">        X_train = X_train.astype(<span class="string">'float32'</span>)</span><br><span class="line">        X_test = X_test.astype(<span class="string">'float32'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> scaling:</span><br><span class="line">            <span class="comment"># scaling to have (0, 1) for each feature (each pixel)</span></span><br><span class="line">            scaler = MinMaxScaler()</span><br><span class="line">            n = X_train.shape[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 스케일링 기준은 X_train 으로만 해야한다. X_test는 X_train으로부터 정해진 기준을 따르게 한다.</span></span><br><span class="line">            X_train = scaler.fit_transform(</span><br><span class="line">                X_train.reshape(n, <span class="number">-1</span>)).reshape(X_train.shape)</span><br><span class="line">            n = X_test.shape[<span class="number">0</span>]</span><br><span class="line">            X_test = scaler.transform(</span><br><span class="line">                X_test.reshape(n, <span class="number">-1</span>)).reshape(X_test.shape)</span><br><span class="line">            self.scaler = scaler</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'X_train shape:'</span>, X_train.shape)</span><br><span class="line">        print(X_train.shape[<span class="number">0</span>], <span class="string">'train samples'</span>)</span><br><span class="line">        print(X_test.shape[<span class="number">0</span>], <span class="string">'test samples'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># convert class vectors to binary class matrices</span></span><br><span class="line">        Y_train = np_utils.to_categorical(y_train, nb_classes)</span><br><span class="line">        Y_test = np_utils.to_categorical(y_test, nb_classes)</span><br><span class="line"></span><br><span class="line">        self.X_train, self.X_test = X_train, X_test</span><br><span class="line">        self.Y_train, self.Y_test = Y_train, Y_test</span><br><span class="line">        self.y_train, self.y_test = y_train, y_test</span><br><span class="line">        <span class="comment"># self.input_shape = input_shape</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 채널 정보를 데이터에 포함시키는 과정</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_channels</span><span class="params">(self)</span>:</span></span><br><span class="line">        X = self.X</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 흑백 이미지인지 검사</span></span><br><span class="line">        <span class="keyword">if</span> len(X.shape) == <span class="number">3</span>:</span><br><span class="line">            N, img_rows, img_cols = X.shape</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> K.image_dim_ordering() == <span class="string">'th'</span>:</span><br><span class="line">                X = X.reshape(X.shape[<span class="number">0</span>], <span class="number">1</span>, img_rows, img_cols)</span><br><span class="line">                input_shape = (<span class="number">1</span>, img_rows, img_cols)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                X = X.reshape(X.shape[<span class="number">0</span>], img_rows, img_cols, <span class="number">1</span>)</span><br><span class="line">                input_shape = (img_rows, img_cols, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            input_shape = X.shape[<span class="number">1</span>:]  <span class="comment"># channel is already included.</span></span><br><span class="line"></span><br><span class="line">        self.X = X</span><br><span class="line">        self.input_shape = input_shape</span><br></pre></td></tr></table></figure><h2 id="4-3-4-분류-CNN의-학습-및-성능-평가를-위한-머신-클래스-구현"><a href="#4-3-4-분류-CNN의-학습-및-성능-평가를-위한-머신-클래스-구현" class="headerlink" title="4.3.4 분류 CNN의 학습 및 성능 평가를 위한 머신 클래스 구현"></a>4.3.4 분류 CNN의 학습 및 성능 평가를 위한 머신 클래스 구현</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 학습 및 성능 평가 코드가 들어 있는 클래스</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Machine</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, X, y, nb_classes=<span class="number">2</span>, fig=True)</span>:</span></span><br><span class="line">        self.nb_classes = nb_classes</span><br><span class="line">        self.set_data(X, y)</span><br><span class="line">        self.set_model()</span><br><span class="line">        <span class="comment"># 수행결과를 그림으로 보여줄지</span></span><br><span class="line">        self.fig = fig</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_data</span><span class="params">(self, X, y)</span>:</span></span><br><span class="line">        nb_classes = self.nb_classes</span><br><span class="line">        self.data = DataSet(X, y, nb_classes)</span><br><span class="line">        print(<span class="string">'data.input_shape'</span>, self.data.input_shape)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_model</span><span class="params">(self)</span>:</span></span><br><span class="line">        nb_classes = self.nb_classes</span><br><span class="line">        data = self.data</span><br><span class="line">        self.model = CNN(nb_classes=nb_classes, in_shape=data.input_shape)</span><br><span class="line">        <span class="comment"># cnn_lenet(nb_classes=nb_classes, in_shape=data.input_shape)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, </span></span></span><br><span class="line"><span class="function"><span class="params">            epochs=<span class="number">10</span>,      # 에포크</span></span></span><br><span class="line"><span class="function"><span class="params">            batch_size=<span class="number">128</span>, # 학습시 한번에 처리할 블록 길이</span></span></span><br><span class="line"><span class="function"><span class="params">            verbose=<span class="number">1</span>       # 화면에 진행사항 표시방법</span></span></span><br><span class="line"><span class="function"><span class="params">        )</span>:</span></span><br><span class="line">        data = self.data</span><br><span class="line">        model = self.model</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 학습 시작</span></span><br><span class="line">        history = model.fit(data.X_train, data.Y_train, batch_size=batch_size, epochs=epochs,</span><br><span class="line">                            verbose=verbose, validation_data=(data.X_test, data.Y_test))</span><br><span class="line">        <span class="keyword">return</span> history</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 학습과 성능 평가 전체를 진행</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, epochs=<span class="number">10</span>, batch_size=<span class="number">128</span>, verbose=<span class="number">1</span>)</span>:</span></span><br><span class="line">        data = self.data</span><br><span class="line">        model = self.model</span><br><span class="line">        fig = self.fig</span><br><span class="line"></span><br><span class="line">        history = self.fit(epochs=epochs,</span><br><span class="line">                           batch_size=batch_size, verbose=verbose)</span><br><span class="line"></span><br><span class="line">        score = model.evaluate(data.X_test, data.Y_test, verbose=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'Confusion matrix'</span>)</span><br><span class="line">        Y_test_pred = model.predict(data.X_test, verbose=<span class="number">0</span>)</span><br><span class="line">        y_test_pred = np.argmax(Y_test_pred, axis=<span class="number">1</span>)</span><br><span class="line">        print(metrics.confusion_matrix(data.y_test, y_test_pred))</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'Test score:'</span>, score[<span class="number">0</span>])</span><br><span class="line">        print(<span class="string">'Test accuracy:'</span>, score[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Save results</span></span><br><span class="line">        suffix = sfile.unique_filename(<span class="string">'datatime'</span>)</span><br><span class="line">        foldname = <span class="string">'output_'</span> + suffix</span><br><span class="line">        os.makedirs(foldname)</span><br><span class="line">        skeras.save_history_history(</span><br><span class="line">            <span class="string">'history_history.npy'</span>, history.history, fold=foldname)</span><br><span class="line">        model.save_weights(os.path.join(foldname, <span class="string">'dl_model.h5'</span>))</span><br><span class="line">        print(<span class="string">'Output results are saved in'</span>, foldname)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 학습 곡선 그리기</span></span><br><span class="line">        <span class="keyword">if</span> fig:</span><br><span class="line">            plt.figure(figsize=(<span class="number">12</span>, <span class="number">4</span>))</span><br><span class="line">            plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">            skeras.plot_acc(history)</span><br><span class="line">            plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">            skeras.plot_loss(history)</span><br><span class="line">            plt.show()</span><br><span class="line"></span><br><span class="line">        self.history = history</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> foldname</span><br></pre></td></tr></table></figure><h2 id="4-3-5-분류-CNN의-학습-및-성능-평가-수행"><a href="#4-3-5-분류-CNN의-학습-및-성능-평가-수행" class="headerlink" title="4.3.5 분류 CNN의 학습 및 성능 평가 수행"></a>4.3.5 분류 CNN의 학습 및 성능 평가 수행</h2><h2 id="http-localhost-8888-notebooks-nb-ex4-2-cnn-cifar10-cl-ipynb"><a href="#http-localhost-8888-notebooks-nb-ex4-2-cnn-cifar10-cl-ipynb" class="headerlink" title="http://localhost:8888/notebooks/nb_ex4_2_cnn_cifar10_cl.ipynb"></a><a href="http://localhost:8888/notebooks/nb_ex4_2_cnn_cifar10_cl.ipynb" target="_blank" rel="noopener">http://localhost:8888/notebooks/nb_ex4_2_cnn_cifar10_cl.ipynb</a></h2><h1 id="4-4-마치며"><a href="#4-4-마치며" class="headerlink" title="4.4 마치며"></a>4.4 마치며</h1><ul><li>CNN 은 합성곱 계층을 이용해 적은 가중치 수로도 이미지 분류에서 높은 성능(?)을 낸다.</li><li>가중치 수가 적기 때문에 과적합의 가능성도 낮아진다.</li><li>이미지 특성에 맞게 합성곱 필터링이 이루어지기 때문에 이미지 내에 있는 특징점을 잘 찾아낸다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;영상처리에 많이 활용되는 합성곱을 이용하는 인공신경망 기술.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;4-1-CNN-원리&quot;&gt;&lt;a href=&quot;#4-1-CNN-원리&quot; class=&quot;headerlink&quot; title=&quot;4.1 
      
    
    </summary>
    
      <category term="DeepLearning" scheme="https://ddulhddul.github.io/categories/DeepLearning/"/>
    
    
      <category term="DeepLearning" scheme="https://ddulhddul.github.io/tags/DeepLearning/"/>
    
      <category term="코딩셰프의 3분 딥러닝, 케라스맛" scheme="https://ddulhddul.github.io/tags/%EC%BD%94%EB%94%A9%EC%85%B0%ED%94%84%EC%9D%98-3%EB%B6%84-%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%BC%80%EB%9D%BC%EC%8A%A4%EB%A7%9B/"/>
    
  </entry>
  
  <entry>
    <title>코딩셰프의 3분 딥러닝, 케라스맛 Init</title>
    <link href="https://ddulhddul.github.io/2018/04/01/DeepLearning/ml011/"/>
    <id>https://ddulhddul.github.io/2018/04/01/DeepLearning/ml011/</id>
    <published>2018-04-01T10:00:52.000Z</published>
    <updated>2019-06-06T10:04:52.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="파이썬-Numpy-강좌"><a href="#파이썬-Numpy-강좌" class="headerlink" title="파이썬 Numpy 강좌"></a><a href="http://aikorea.org/cs231n/python-numpy-tutorial/" target="_blank" rel="noopener">파이썬 Numpy 강좌</a></h2><h2 id="코딩셰프의-3분-딥러닝-케라스맛-Github"><a href="#코딩셰프의-3분-딥러닝-케라스맛-Github" class="headerlink" title="코딩셰프의 3분 딥러닝, 케라스맛 Github"></a><a href="https://github.com/jskDr/keraspp" target="_blank" rel="noopener">코딩셰프의 3분 딥러닝, 케라스맛 Github</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;파이썬-Numpy-강좌&quot;&gt;&lt;a href=&quot;#파이썬-Numpy-강좌&quot; class=&quot;headerlink&quot; title=&quot;파이썬 Numpy 강좌&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://aikorea.org/cs231n/python-numpy-tu
      
    
    </summary>
    
      <category term="DeepLearning" scheme="https://ddulhddul.github.io/categories/DeepLearning/"/>
    
    
      <category term="DeepLearning" scheme="https://ddulhddul.github.io/tags/DeepLearning/"/>
    
      <category term="코딩셰프의 3분 딥러닝, 케라스맛" scheme="https://ddulhddul.github.io/tags/%EC%BD%94%EB%94%A9%EC%85%B0%ED%94%84%EC%9D%98-3%EB%B6%84-%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%BC%80%EB%9D%BC%EC%8A%A4%EB%A7%9B/"/>
    
  </entry>
  
  <entry>
    <title>생활코딩. 지옥에서 온 Git 정리</title>
    <link href="https://ddulhddul.github.io/2018/03/22/datas/git/git001/"/>
    <id>https://ddulhddul.github.io/2018/03/22/datas/git/git001/</id>
    <published>2018-03-22T13:00:52.000Z</published>
    <updated>2019-06-06T10:04:52.488Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://opentutorials.org/course/2708" target="_blank" rel="noopener">생활코딩 - 지옥에서 온 Git</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="Git-init-Setting"><a href="#Git-init-Setting" class="headerlink" title="Git init Setting"></a>Git init Setting</h2><ol start="0"><li>git bash 구동</li><li><p>SSL 인증서 검증을 끕니다.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>HTTP POST 최대 사이즈를 수정합니다.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000</span><br></pre></td></tr></table></figure></li><li><p>git bash 구동시, 초기 path 설정</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$home</span></span><br><span class="line">$ vi .bashrc</span><br></pre></td></tr></table></figure><ul><li>Edit 창에 cd %프로젝트 경로% 입력 후 :wq<ul><li>(본인의 프로젝트 경로를 입력한다.)</li></ul></li></ul></li><li><p>Git bash User name &amp; Email Setting</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"mailmail@mail.com"</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="GIt-에서-특정-파일을-제외하는-방법"><a href="#GIt-에서-특정-파일을-제외하는-방법" class="headerlink" title="GIt 에서 특정 파일을 제외하는 방법"></a>GIt 에서 특정 파일을 제외하는 방법</h2><ul><li>저장소에서 파일 삭제하지만 내 작업공간에 필요한 경우  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached filename</span><br></pre></td></tr></table></figure></li></ul><ul><li>저장소에도 필요하고 내 작업공간도 필요한 경우  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git update-index --assume-unchanged [path]</span><br></pre></td></tr></table></figure></li></ul><hr><hr><h1 id="버전-관리의-본질"><a href="#버전-관리의-본질" class="headerlink" title="버전 관리의 본질"></a>버전 관리의 본질</h1><h2 id="1-설치-및-실습-방법"><a href="#1-설치-및-실습-방법" class="headerlink" title="1. 설치 및 실습 방법"></a>1. 설치 및 실습 방법</h2><ul><li><a href="http://git-scm.com" target="_blank" rel="noopener">Git</a></li><li><a href="https://codeonweb.com/dashboard" target="_blank" rel="noopener">code on web</a></li></ul><h2 id="2-저장소-만들기"><a href="#2-저장소-만들기" class="headerlink" title="2. 저장소 만들기"></a>2. 저장소 만들기</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><h2 id="3-git이-관리할-대상으로-파일-등록"><a href="#3-git이-관리할-대상으로-파일-등록" class="headerlink" title="3. git이 관리할 대상으로 파일 등록"></a>3. git이 관리할 대상으로 파일 등록</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim f1.txt</span><br><span class="line"><span class="comment"># typing 'source : 1'</span></span><br><span class="line">$ git add f1.txt</span><br><span class="line">$ git status</span><br></pre></td></tr></table></figure><h2 id="4-버전-만들기-commit"><a href="#4-버전-만들기-commit" class="headerlink" title="4. 버전 만들기 (commit)"></a>4. 버전 만들기 (commit)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Commiter Info Setting</span></span><br><span class="line">$ git config --global user.name <span class="string">"name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"mailmail@mail.com"</span></span><br><span class="line"><span class="comment"># Commit</span></span><br><span class="line">$ git commit</span><br><span class="line"><span class="comment"># typing commit message 'version 1'</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="5-Stage-area"><a href="#5-Stage-area" class="headerlink" title="5. Stage area"></a>5. Stage area</h2><p>Commit 전에 Add를 하는 이유는, 선택적으로 파일을 버전에 포함시키기 위함.<br>Add 를 하면 Stage Area 에 등록된다.</p><h2 id="6-변경사항-확인하기"><a href="#6-변경사항-확인하기" class="headerlink" title="6. 변경사항 확인하기"></a>6. 변경사항 확인하기</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 각각의 커밋과 커밋 사이 소스 차이 확인 가능</span></span><br><span class="line">$ git <span class="built_in">log</span> -p</span><br><span class="line"><span class="comment"># 해당 커밋 이전의 내용만 확인 가능</span></span><br><span class="line">$ git <span class="built_in">log</span> 48d495b0580194d38bd49bc4993f4bedf26a28aa</span><br><span class="line"><span class="comment"># 해당 커밋 사이의 변경 내용 확인</span></span><br><span class="line">$ git diff ee40b63a6e923cee04ba9dc3ae9306e50a9e53f9..08eaffc820df097f0746359d5d70cb15ba8b03b5</span><br><span class="line"><span class="comment"># 현재 어떤 작업 했는지 확인 가능</span></span><br><span class="line">$ git diff</span><br></pre></td></tr></table></figure><h2 id="7-과거의-버전으로-돌아가기"><a href="#7-과거의-버전으로-돌아가기" class="headerlink" title="7. 과거의 버전으로 돌아가기"></a>7. 과거의 버전으로 돌아가기</h2><p>현재의 로그를 취소해서 과거로 돌아가고 싶다 ??</p><ol><li><p>Reset</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 08eaffc820df097f0746359d5d70cb15ba8b03b5 이후의 버전을 삭제</span></span><br><span class="line">$ git reset 08eaffc820df097f0746359d5d70cb15ba8b03b5 --hard</span><br></pre></td></tr></table></figure><p> 실제로는 버린게 아니라, 남아있다. 보이지 않을뿐.</p></li><li><p>Revert<br> 커밋을 날리는 것이 아니라 해당 커밋을 취소하면서 새로운 버전을 생성한다.</p></li></ol><h2 id="8-명령의-빈도와-메뉴얼-보는-방법"><a href="#8-명령의-빈도와-메뉴얼-보는-방법" class="headerlink" title="8. 명령의 빈도와 메뉴얼 보는 방법"></a>8. 명령의 빈도와 메뉴얼 보는 방법</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><hr><h1 id="Git의-원리"><a href="#Git의-원리" class="headerlink" title="Git의 원리"></a>Git의 원리</h1><h2 id="1-gistory-설치"><a href="#1-gistory-설치" class="headerlink" title="1. gistory 설치"></a>1. gistory 설치</h2><blockquote><p>.git 내부 변화를 살펴보며, git 이 어떻게 작동하는지 알아보자.</p></blockquote><ol><li>python을 설치합니다. (python2, 3 모두 호환됩니다)<br> <a href="http://python.org/" target="_blank" rel="noopener">http://python.org/</a></li><li>pip로 설치합니다. <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install gistory</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-git-add의-원리"><a href="#2-git-add의-원리" class="headerlink" title="2. git add의 원리"></a>2. git add의 원리</h2><p>내용이 같으면 같은 파일명에 담긴다. // 어떻게 ? // sha1</p><h2 id="3-objects-파일명의-원리"><a href="#3-objects-파일명의-원리" class="headerlink" title="3. objects 파일명의 원리"></a>3. objects 파일명의 원리</h2><p>각각의 버전은 tree, blob, commit 으로 구성된다.</p><h2 id="4-status의-원리"><a href="#4-status의-원리" class="headerlink" title="4. status의 원리"></a>4. status의 원리</h2><p>working directory - index, staging area, cache - repository<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure></p><ul><li>최신 commit 과 index 의 내용을 비교해서 알려준다.<br><img src="https://i.stack.imgur.com/caci5.png" alt="https://i.stack.imgur.com/caci5.png"><ul><li>Add 하면 Staging Area(index 파일)에 등록 // Commit 대기상태</li><li>Commit 하면 Local Repository에 등록</li></ul></li></ul><hr><h1 id="git의-혁신-branch"><a href="#git의-혁신-branch" class="headerlink" title="git의 혁신 - branch"></a>git의 혁신 - branch</h1><h2 id="1-branch-만들기"><a href="#1-branch-만들기" class="headerlink" title="1. branch 만들기"></a>1. branch 만들기</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">$ git branch exp <span class="comment"># exp 이름의 branch 생성</span></span><br><span class="line">$ git checkout exp <span class="comment"># exp branch 로 이동</span></span><br></pre></td></tr></table></figure><h2 id="2-branch-정보확인"><a href="#2-branch-정보확인" class="headerlink" title="2. branch 정보확인"></a>2. branch 정보확인</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">$ git <span class="built_in">log</span> --branches --graph <span class="comment"># 현재 체크아웃되어있는 브랜치 말고 저장소의 모든 브랜치를 보여줌</span></span><br><span class="line">$ git <span class="built_in">log</span> --branches --graph --oneline <span class="comment"># 한줄로 표현</span></span><br><span class="line">$ git <span class="built_in">log</span> master..exp <span class="comment"># master엔 없고 exp에 있는 커밋을 보여줌</span></span><br><span class="line">$ git diff master..exp <span class="comment"># master엔 없고 exp에 있는 내용을 보여줌</span></span><br></pre></td></tr></table></figure><ul><li>stree // GUI 버전관리툴</li></ul><h2 id="3-branch-병합"><a href="#3-branch-병합" class="headerlink" title="3. branch 병합"></a>3. branch 병합</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exp 의 내용을 master로 옮기는 방법</span></span><br><span class="line">$ git checkout master</span><br><span class="line">$ git merge exp</span><br><span class="line"></span><br><span class="line"><span class="comment"># master 의 내용을 exp로 옮기는 방법</span></span><br><span class="line">$ git checkout exp</span><br><span class="line">$ git merge master</span><br><span class="line"></span><br><span class="line"><span class="comment"># exp branch 삭제</span></span><br><span class="line">$ git checkout master</span><br><span class="line">$ git branch -d exp</span><br></pre></td></tr></table></figure><ul><li>두개의 부모를 갖는 하나의 commit 이 만들어진다.</li></ul><h2 id="4-branch-수련"><a href="#4-branch-수련" class="headerlink" title="4. branch 수련"></a>4. branch 수련</h2><p><a href="https://www.git-scm.com" target="_blank" rel="noopener">https://www.git-scm.com</a><br><a href="https://www.git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging" target="_blank" rel="noopener">3.2 Git Branching - Basic Branching and Merging</a></p><ul><li><p>Fast-Forward</p><ul><li>(master) git merge hotfix</li><li>master는 hotfix 를 가리키게 된다. (별도의 커밋을 생성하지 않는다.)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b <span class="string">'iss53'</span></span><br><span class="line">$ git checkout master</span><br><span class="line">$ git merge hotfix</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Recursive Stragety</p><ul><li>master 와 iss53 의 공통의 조상을 찾는다.</li><li><p>두가지의 브랜치를 합친 별도의 머지 커밋을 만든다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git merge iss53</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line"><span class="comment">## 5. branch 병합 시 충돌해결</span></span><br><span class="line">- 같은 파일임에도 수정한 위치가 다르면 자동 merge.</span><br><span class="line">- 같은 위치를 수정했을때 merge -&gt; conflict</span><br><span class="line">    ```bash</span><br><span class="line">     (master|MERGING)</span><br><span class="line">    &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">    <span class="keyword">function</span> b()</span><br><span class="line">    =======</span><br><span class="line">    <span class="keyword">function</span> c()</span><br><span class="line">    &gt;&gt;&gt;&gt;&gt;&gt;&gt; exp</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">a</span></span>()&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>자동병합에 실패했기 때문에, 충돌 해결을 위임한 것.</p></li></ul></li><li><p>해결 방법</p><ol><li>충돌난 부분 수정</li><li>git add 해당파일</li><li>git commit -m ‘’</li></ol></li></ul><h2 id="6-stash"><a href="#6-stash" class="headerlink" title="6. stash"></a>6. stash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git checkout master </span><br><span class="line"><span class="comment"># 작업이 끝나지 않았으면 작업 그대로 master 로 가기때문에 곤란하다.</span></span><br><span class="line"></span><br><span class="line">$ git stash</span><br><span class="line"><span class="comment"># Saved working directory and index state WIP on exp: b920916 10</span></span><br><span class="line"><span class="comment"># 작업중인 변경사항들이 save되었다.</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line">$ git stash apply</span><br><span class="line"><span class="comment"># 작업중인 변경사항들이 load되었다.</span></span><br><span class="line"></span><br><span class="line">$ git stash list</span><br><span class="line"><span class="comment"># stash@&#123;0&#125;: WIP on exp: b920916 10</span></span><br><span class="line"></span><br><span class="line">$ git reset --hard HEAD</span><br><span class="line">$ git stash apply</span><br><span class="line"><span class="comment"># 명시적으로 삭제하지 않는이상 stash 는 살아있다.</span></span><br><span class="line"></span><br><span class="line">$ vim f2.txt <span class="comment"># 신규파일</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash list</span><br><span class="line"><span class="comment"># stash@&#123;0&#125;: WIP on exp: b920916 10  // 방금것</span></span><br><span class="line"><span class="comment"># stash@&#123;1&#125;: WIP on exp: b920916 10  // 그 이전것</span></span><br><span class="line"></span><br><span class="line">$ git stash apply <span class="comment"># 가장 최근 stash 가 적용된다.</span></span><br><span class="line">$ git stash drop <span class="comment"># 최근 stash 제거</span></span><br><span class="line"></span><br><span class="line">$ git stash apply; git stash drop;</span><br><span class="line">$ git stash pop</span><br><span class="line"><span class="comment"># 적용하고 삭제하고</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Untracked files 는 stash 에 저장되지 않는다. </span></span><br><span class="line"><span class="comment"># 버전관리가 되고있는 파일들만 stash 할 수 있다.</span></span><br></pre></td></tr></table></figure><hr><h1 id="끝이-열려-있는-수업과-학습"><a href="#끝이-열려-있는-수업과-학습" class="headerlink" title="끝이 열려 있는 수업과 학습"></a>끝이 열려 있는 수업과 학습</h1><h2 id="3-way-merge"><a href="#3-way-merge" class="headerlink" title="3 way merge"></a>3 way merge</h2><table><thead><tr><th>Me</th><th>Base</th><th>Other</th><th>2way merge</th><th>3way merge</th></tr></thead><tbody><tr><td> A</td><td>A</td><td>-</td><td><font color="red">?</font></td><td>-</td></tr><tr><td> B</td><td>B</td><td>B</td><td>B</td><td>B</td></tr><tr><td> 1</td><td>C</td><td>2</td><td><font color="red">?</font></td><td><font color="red">?</font></td></tr><tr><td> -</td><td>D</td><td>D</td><td><font color="red">?</font></td><td>-</td></tr></tbody></table><ul><li>2way merge : base 를 보지않고 2개를 병합</li><li>3way merge : base를 참고로 해서 2개를 병합</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://opentutorials.org/course/2708&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;생활코딩 - 지옥에서 온 Git&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Tips&quot;&gt;&lt;a href=&quot;#Tips&quot; cl
      
    
    </summary>
    
      <category term="Git" scheme="https://ddulhddul.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://ddulhddul.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>리액트 참조 사이트</title>
    <link href="https://ddulhddul.github.io/2018/03/17/datas/react/react_d2/"/>
    <id>https://ddulhddul.github.io/2018/03/17/datas/react/react_d2/</id>
    <published>2018-03-17T13:00:52.000Z</published>
    <updated>2019-06-06T10:04:52.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-적용-가이드-React와-Redux"><a href="#React-적용-가이드-React와-Redux" class="headerlink" title="React 적용 가이드 - React와 Redux"></a>React 적용 가이드 - React와 Redux</h2><p><a href="http://d2.naver.com/helloworld/1848131" target="_blank" rel="noopener">http://d2.naver.com/helloworld/1848131</a></p><ul><li>Sample Code<br><a href="https://github.com/naver/react-sample-code" target="_blank" rel="noopener">https://github.com/naver/react-sample-code</a></li></ul><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p><a href="https://deminoth.github.io/redux/" target="_blank" rel="noopener">https://deminoth.github.io/redux/</a></p><h2 id="React-적용-가이드-React-작동-방법"><a href="#React-적용-가이드-React-작동-방법" class="headerlink" title="React 적용 가이드 - React 작동 방법"></a>React 적용 가이드 - React 작동 방법</h2><p><a href="http://d2.naver.com/helloworld/9297403" target="_blank" rel="noopener">http://d2.naver.com/helloworld/9297403</a></p><h2 id="React-적용-가이드-네이버-메일-모바일-웹-적용기"><a href="#React-적용-가이드-네이버-메일-모바일-웹-적용기" class="headerlink" title="React 적용 가이드 - 네이버 메일 모바일 웹 적용기"></a>React 적용 가이드 - 네이버 메일 모바일 웹 적용기</h2><p><a href="http://d2.naver.com/helloworld/4966453" target="_blank" rel="noopener">http://d2.naver.com/helloworld/4966453</a></p><h2 id="React-Flux-Redux-관련-자료"><a href="#React-Flux-Redux-관련-자료" class="headerlink" title="React, Flux, Redux 관련 자료"></a>React, Flux, Redux 관련 자료</h2><p><a href="http://d2.naver.com/news/7030975" target="_blank" rel="noopener">http://d2.naver.com/news/7030975</a></p><h2 id="Velopert-React-JS-강좌-목록"><a href="#Velopert-React-JS-강좌-목록" class="headerlink" title="Velopert - [React.JS] 강좌 목록"></a>Velopert - [React.JS] 강좌 목록</h2><p><a href="https://velopert.com/reactjs-tutorials" target="_blank" rel="noopener">https://velopert.com/reactjs-tutorials</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-적용-가이드-React와-Redux&quot;&gt;&lt;a href=&quot;#React-적용-가이드-React와-Redux&quot; class=&quot;headerlink&quot; title=&quot;React 적용 가이드 - React와 Redux&quot;&gt;&lt;/a&gt;React 적용 
      
    
    </summary>
    
      <category term="자료정리" scheme="https://ddulhddul.github.io/categories/%EC%9E%90%EB%A3%8C%EC%A0%95%EB%A6%AC/"/>
    
      <category term="react" scheme="https://ddulhddul.github.io/categories/%EC%9E%90%EB%A3%8C%EC%A0%95%EB%A6%AC/react/"/>
    
    
      <category term="javascript" scheme="https://ddulhddul.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://ddulhddul.github.io/tags/react/"/>
    
  </entry>
  
</feed>
